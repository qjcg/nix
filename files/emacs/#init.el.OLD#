;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GENERAL SETTINGS

;; Use a *separate* file for customizations.
;; See M-x customize
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

;; Set Emacs C source code dir (for use, eg, with xref-find-definitions).
;; Use "M-x emacs-version" to confirm current version, then download from
;; https://ftp.gnu.org/pub/gnu/emacs/
(setq find-function-C-source-directory "~/s/src/emacs-26.2/src/")

;; Add paths to load path.
;; Ref: http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/
;; - mu4e email client
;; FIXME: Not working???
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

;; Add exec paths 
(add-to-list 'exec-path "~/.local/go/bin")

;; Enable some default-disabled features.
(put 'downcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)
(put 'upcase-region 'disabled nil)

;; Transparency
;; Ref:
;;   - https://www.emacswiki.org/emacs/TransparentEmacs
;; TODO: Put this in a "graphical-only" section.
(set-frame-parameter (selected-frame) 'alpha '(100 100))
(add-to-list 'default-frame-alist '(alpha 100 100))


;; GLOBAL Keybindings
(define-key global-map (kbd "RET") 'newline-and-indent) ;; Auto-indent everywhere (and manually disable where needed)
(global-set-key (kbd "C-c C-r") 'sudo-edit)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

;; Ido
;; Ref: https://masteringemacs.org/article/introduction-to-ido-mode
(ido-mode t)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-create-new-buffer 'always)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PACKAGES

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)


;; EXWM Window Manager
;; (use-package exwm
;;   :ensure t

;;   :config
;;   (use-package exwm-config)
;;   (exwm-config-default)

;;   (use-package exwm-randr)
;;   (setq exwm-randr-workspace-output-plist '(0 "eDP1" 1 "HDMI2"))
;;   (add-hook 'exwm-randr-screen-change-hook
;; 	    (lambda ()
;; 	      (start-process-shell-command
;; 	       "xrandr" nil "xrandr --output HDMI2 --right-of eDP1 --auto && ~/.fehbg")))
;;   (exwm-randr-enable))


(use-package writeroom-mode
  :ensure t
  :bind (("C-c g" . writeroom-mode)))

(use-package olivetti
  :ensure t)

(use-package slime
  :ensure t
  :config
  (setq inferior-lisp-program "/usr/bin/sbcl")
  (slime-setup '(slime-fancy)))

;; StumpWM
(setf stumpwm-shell-program "stumpish")

(use-package ansible
  :ensure t)

(use-package paradox
  :ensure t
  :config
  (setq paradox-github-token "64495ea41e42171718dd5bd1752e71d3e3b43b3f"))

;; Python
(use-package elpy
  :ensure t
  :defer t

  :init
  (advice-add 'python-mode :before 'elpy-enable)

  ;; Use jupyter
  ;; See https://elpy.readthedocs.io/en/latest/ide.html#interpreter-setup
  (setq python-shell-interpreter "jupyter"
	python-shell-interpreter-args "console --simple-prompt"
	python-shell-prompt-detect-failure-warning nil)

  :config
  (use-package py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

(use-package git-gutter-fringe
  :ensure t
  :config
  (global-git-gutter-mode t))

(use-package keyfreq
  :ensure t
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))

(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))

(use-package magit
  :ensure t)

;; Go
;; References:
;;   - https://andrewjamesjohnson.com/configuring-emacs-for-go-development/
;;   - https://www.youtube.com/watch?v=BLCNSeeze3U
;;   - https://github.com/vdemeester/emacs-config/blob/master/lisp/setup-go.el
(use-package go-mode
  :ensure t
  :bind (:map go-mode-map
	      ("<C-return>" . 'compile)
	      ("M-." . 'godef-jump))

  :config
  (add-hook 'go-mode-hook 'go-mode-setup)
  (add-hook 'before-save-hook 'gofmt-before-save)

  ;; Avoid the need to press "Enter" after calling compile-command.
  ;; Ref: https://www.emacswiki.org/emacs/CompileCommand#toc3
  (setq compilation-read-command nil)

  (setq compile-command "go build -v && go test -v && go vet")
  (setq gofmt-command "goimports"))

(use-package go-eldoc
  :ensure t
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))

(use-package hydra
  :config

  (defhydra hydra-zoom (global-map "<f9>")
    "zoom"
    ("=" text-scale-increase "in")
    ("-" text-scale-decrease "out")))

(use-package imenu-list
  :ensure t
  
  :bind
  (("C-'" . #'imenu-list-smart-toggle))
  
  :config
  (setq imenu-list-focus-after-activation t)
  (setq imenu-list-auto-resize t)
  (setq imenu-list-after-jump-hook nil)
  (add-hook 'imenu-list-after-jump-hook #'recenter-top-bottom))



(defvar jg/awesome-themes
  '(nofrils-acme
    nofrils-sepia
    doom-challenger-deep
    doom-nord-light
    doom-solarized-light
    green-screen
    light-blue
    tango
    whiteboard)
  "List of my preferred themes.

Can be used to randomly choose a theme."
  )


(defadvice load-theme (before theme-dont-propagate activate)
  "Advise load-theme to disable all custom themes before loading (enabling) another one.

See this StackOverflow answer: https://emacs.stackexchange.com/a/3114"
  (mapc #'disable-theme custom-enabled-themes))

(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-challenger-deep t))

(defhydra jg/random-theme (global-map "C-c r")
  "Choose random theme from jg/awesome-themes:"

  ("r" (load-theme (jg/random-list-item jg/awesome-themes))))


(defvar jg/current-theme-light nil
  "Current theme state
Should have a value of either 'light' or 'dark'")

;; TODO: Make this a pure function by accepting an argument rather than examining background-color-at-point.
(defun jg/background-luminance ()
  "Calculate luminance value from an RGB integer."
  (interactive)
  (let ((bg
	 (string-to-number
	  (substring (background-color-at-point) 1 nil)
	  16)))
    (message (format "bg value is %s" bg))
    ))

;; TODO: Base toggle on current background luminance instead of a custom variable.
(defun jg/yin-yang (light-theme dark-theme)
  "Toggle between a light and dark theme."
  (load-theme (if jg/current-theme-light
		  (prog1 dark-theme
		    (message (format "☯ YIN %s ☯" dark-theme)))
		  (prog1 light-theme
		    (message (format "☯ YANG %s ☯" light-theme))))
		  t)
  (setq jg/current-theme-light (not jg/current-theme-light))) ; toggle value

(global-set-key (kbd "C-x y") (lambda ()
				(interactive)
				(jg/yin-yang 'doom-solarized-light 'doom-challenger-deep)))

(use-package emojify
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-emojify-mode))

(use-package elfeed
  :ensure t
  ;; :bind (:map elfeed-search-mode-map
  ;; 	      ("*" . '(elfeed-search-toggle-all '("starred"))))
  :config
  ;; For filter syntax, see https://github.com/skeeto/elfeed#filter-syntax
  (setq elfeed-search-filter "@6-months-ago +unread -firehose")) ; default search filter

;; Elfeed-org
;; Use an org-file to organize feeds.
;;; See:
;;;  - https://github.com/remyhonig/elfeed-org
;;;  - http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))

(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

;; Preview markdown live in-browser.
(use-package flymd
  :ensure t)


;; UTILITY FUNCTIONS
(defun jg/greet (name)
  "Print a friendly greeting.

Really just an example of function definition in emacs lisp!
"
  (interactive "sWho to greet? ")
  (message "Hello, %s!" name))

(defun jg/reload-emacs-init-file ()
  "Reload emacs init file."
  (interactive)
  (load user-init-file))

(defun jg/random-list-item (list)
  "Return a random element from a list."
  (interactive)
  (nth (random (length list)) list))


(defvar jg/emacs-acronyms
  '(
    "Emacs Makes A Computer Slow"
    "Emacs: My Alternative Computer Story"
    
    "Elvis Masterminds All Computer Software"
    "Eating Memory And Cycle-Sucking"
    "Exceptionally Mediocre Autocratic Control System"
    "Extraneous Macros And Commands Stink"
    "Easily Mangles, Aborts, Crashes and Stupifies"
    "Elsewhere Maybe All Commands are Simple"
    "Even My Aunt Crashes the System"
    "Escape-Meta-Alt-Control-Shift"
    )
  "Emacs acronyms. For use with the 'dashboard' package, for example.

See https://www.gnu.org/fun/jokes/gnuemacs.acro.exp.html .
")


;; REGISTERS for commonly-used files.
(set-register ?f '(file . "~/.emacs.d/elfeed.org"))
(set-register ?i '(file . "~/.emacs.d/init.el"))
(set-register ?m '(file . "~/.emacs.d/main.org"))

;; MUST be defined after used functions and params (ex: jg/random-list-item, etc)
(use-package all-the-icons
  :ensure t)

(use-package projectile
  :ensure t)

(use-package dashboard
  :ensure t
  :bind (("C-c d" . (lambda ()
		      (interactive)
		      (progn
			(switch-to-buffer "*dashboard*")
			(dashboard-refresh-buffer)))))
  :init
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
	dashboard-banner-logo-title (jg/random-list-item jg/emacs-acronyms)
	dashboard-startup-banner "~/.emacs.d/imgs/ozymandias_sm.png"
	dashboard-items '((agenda . 5)
			  (projects . 5)
			  (registers . 5)
			  (recents . 5)
			  (bookmarks . 5))
	dashboard-footer "I met a traveller from an antique land..."
	dashboard-footer-icon (all-the-icons-octicon "dashboard"
						     :height 1.1
						     :v-adjust -0.05
						     :face 'font-lock-keyword-face))

  :config
  (dashboard-setup-startup-hook))
