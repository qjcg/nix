#+TITLE: Literate Emacs configuration using org-mode
#+SUBTITLE: An Emacs Lisp journey
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el
#+FILETAGS: emacs
#+TODO: TODO(t) BLOCKED(b) | DONE(d) CANCELLED(c)
#+STARTUP: content

[[./EmacsIcon.svg]]

* Overview

  Literate Emacs configuration using org-mode.

  See https://orgmode.org/worg/org-contrib/babel/intro.html#emacs-initialization

** Goals [1/6]

   What do I want from Emacs?

*** TODO Provide ultimate Developer Experience (DX) [5/10]
    - [X] Git (magit)
    - [X] Reproducible editor package (via Nix)
    - [X] Snippets (yasnippets)
    - [X] Fuzzy-find (rg/fzf integration, prot window)
    - [X] Completion
    - [ ] Go (format, compile, test, jump-to-definition, debug)
    - [ ] Nix (format)
    - [ ] CUE (format, highlight)
    - [ ] NodeJS
    - [ ] Python
*** DONE Provide excellent DevOps experience [2/2]
    - [X] Docker (docker)
    - [X] Kubernetes (kubernetes-overview, kubel)
*** TODO Provide integrated daily drivers [3/10]
    - [X] web (eww BUT sometimes hangs? Performance mediocre)
    - [X] music (bongo w/ mpv backend)
    - [-] videos (bongo w/ mpv backend)
      - [X] local videos
      - [ ] youtube etc.
    - [ ] RSS (elfeed)
      - [ ] Central elfeed file on server?
    - [X] shell (eshell + vterm)
    - [-] Slack
      - [X] Read channels
      - [ ] Receive notifications
    - [ ] email
    - [ ] image viewer
    - [ ] slides
    - [ ] making art (drawing, music, writing/blogging, etc)
*** TODO Provide stunning looks [1/3]
    - [X] Look into prot's bullet points, fonts, etc
    - [ ] multi-font theme(s)
    - [ ] awesome colorscheme
*** TODO Provide ultimate hackability [0/5]
    - [ ] Write 10 custom functions
    - [ ] Write a custom minor mode
    - [ ] Write a custom major mode
    - [ ] Add language support for an unsupported language (e.g. CUE)
    - [ ] Create a custom theme (e.g. via `M-x customize-create-theme`)
*** TODO Provide OrgMode ExoBrain [2/7]

    See [[https://github.com/JSmurf/awesome-org][awesome-org]].

    - [X] Todo lists
      - [X] Personal
      - [X] Work
    - [X] Agenda
    - [ ] Sync (via Syncthing etc)
    - [ ] Capture
      - [ ] Todo items
      - [ ] Web bookmarks (from browser)
    - [ ] Journal
    - [ ] Evaluate related packages
    - [ ] Add Wrike custom link type (e.g. "wrike:12345")

    |-------------+----------------------------------------------------+--------|
    | PACKAGE     | DESCRIPTION                                        | RATING |
    |-------------+----------------------------------------------------+--------|
    | [[https://github.com/bastibe/org-journal][org-journal]] | A simple org-based journalling mode.               |        |
    | [[https://www.orgroam.com/][org-roam]]    | A plain-text personal knowledge management system. |        |
    | [[https://github.com/alphapapa/org-sidebar][org-sidebar]] | Helpful sidebars for Org buffers.                  |        |
    | [[https://github.com/landakram/org-z][org-z]]       | Lightweight, Org-mode flavored zettelkasten links. |        |

** Comparison with alternatives

   I used VIM as my primary text editor for ~15 years (although I also
   dabbled in Emacs and Plan9's ACME during that period). I then
   switched to Emacs full-time in 2020. This table describes some of
   the reasons why.

   #+NAME: Emacs vs. Alternatives
   | Feature  | Emacs        | VIM              | Acme                                | VSCode     |
   |----------+--------------+------------------+-------------------------------------+------------|
   | language | Emacs Lisp   | VimScript        | any                                 | JavaScript |
   | scope    | kitchen sink | text-editor plus | integrating development environment | minimal    |

** Emacs Startup

   The Emacs startup process is described in detail [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][here]].

** References
*** Learning

    Useful Emacs learning resources.

    - [[https://github.com/jtmoulia/elisp-koans][Elisp Koans]]
    - [[https://github.com/chrisdone/elisp-guide][Elisp Guide]]
    - [[https://www.youtube.com/watch?v=RiXK7NALgRs&list=PL8Bwba5vnQK14z96Gil86pLMDO2GnOhQ6][Emacs Videos by Protesilaos Stavrou]]
    - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
    - [[https://github.com/p3r7/awesome-elisp][Awesome Elisp]]
    - [[http://caiorss.github.io/Emacs-Elisp-Programming/][Emacs in a Box]]

*** Emacs Init Files

    Some other init files.

    - https://github.com/EgorDuplensky/emacs-init-org/blob/master/my-init.org
    - https://github.com/dariushazimi/emacsdotfiles/blob/master/myinit-linux.org
    - https://github.com/globz/emacs-conf/blob/master/init.org
    - https://raw.githubusercontent.com/AlexStragies/EmacsConfig/master/emacs.org
    - https://raw.githubusercontent.com/EgorDuplensky/emacs-init-org/master/my-init.org
    - https://raw.githubusercontent.com/gitten/.emacs.d/master/config.org
    - https://raw.githubusercontent.com/vhallac/literate.emacs.d/master/Startup.org
    - https://protesilaos.com/dotemacs/
    - https://gitlab.com/protesilaos/dotfiles/-/raw/master/emacs/.emacs.d/emacs-init.org
    - https://justin.abrah.ms/dotfiles/emacs.html
    - https://github.com/f1rstperson/dotfiles/tree/master/emacs/config/applications


* Configuration
** TODO Packages to review [0/4]
*** TODO Create a "package for review" org-capture template!

    Review should have 3 steps: research, pilot, review.

    - [ ] strokes (see strokes-mode, strokes-help)
    - [ ] rigpa
    - [ ] burly
    - [ ] persp-mode (like perspective, but across frames)
    - [ ] org-projectile
    - [ ] persp-projectile
    - [ ] projectile-speedbar
    - [ ] [[https://github.com/emacsmirror/excorporate][excorporate]] (office 365 mail, calendar, ...)
    - [ ] [[https://github.com/kljohann/mpv.el][mpv.el]]
    - [ ] smex (smart "M-x")
    - [ ] which-key
    - [ ] paredit (see [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][Structured Guide to Paredit]])

    | Name             | Description          | Notes                                          | Rating |
    |------------------+----------------------+------------------------------------------------+--------|
    | perspective      | workspaces for emacs |                                                |        |
    | persp-projectile |                      |                                                |        |
    | org-projectile   |                      |                                                |        |
    | [[https://github.com/countvajhula/rigpa/][rigpa]]            |                      | AKA "Epistemic Mode". See emacsconf 2020 talk. |        |
    | dashboard        |                      |                                                |        |
    | mu4e             |                      |                                                |        |
    | notmuch          |                      |                                                |        |

** TODO Config changes to review [0/8]
*** TODO [[http://www.nextpoint.se/?p=845][Byte compile the quickstart file]]
*** TODO [[http://www.nextpoint.se/?p=834][Static generation for init file?]]
*** TODO [[https://github.com/jjuliano/practical.org.el][Practical GTD and Zettelkasten workflow]]
*** TODO [[https://takeonrules.com/2020/12/18/directory-structure-for-my-org-instance/][Directory structure for my org instance]]
*** TODO [[https://yannherklotz.com/blog/2020-12-21-introduction-to-luhmanns-zettelkasten.html][Introduction to Luhmann's Zettelkasten]]
*** TODO [[https://github.com/alhassy/org-special-block-extras][Use org-special-block-extras for generating HTML and/or LaTeX]]
*** TODO [[https://github.com/tecosaur/org-pandoc-import][Use org-pandoc-import (convert various file types to org)]]
*** TODO [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]

** Emacs Basics
   :PROPERTIES:
   :ID:       cd50c59c-387b-4c55-9b98-94dd93268980
   :END:

   See: https://tech.toryanderson.com/2020/11/13/migrating-to-a-custom-file-less-setup/

   #+begin_src emacs-lisp
     (use-package emacs
       :init
       (menu-bar-mode -1)
       (tool-bar-mode -1)
       (scroll-bar-mode -1)

       ;; Load custom theme(s) from here.
       (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

       ;; Specify default font without using Customize.
       (when (member "JuliaMono" (font-family-list))
	 (add-to-list 'default-frame-alist '(font . "JuliaMono-20")))

       :custom
       (custom-file
	"~/.config/emacs/custom.el"
	"Use a *separate* file for customizations. See https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html#Saving-Customizations")
       (echo-keystrokes 0.1 "Show keystrokes ASAP")
       (inhibit-startup-message t)
       (initial-scratch-message nil)
       (mouse-yank-at-point t "Yank at point, NOT click (i.e. mouse cursor position).")
       (show-trailing-whitespace t)
       (auto-fill-mode t)
       (browse-url-browser-function 'eww-browse-url "Browse with eww by default")
       (backup-directory-alist '(("." . "~/.config/emacs/backup"))))

     (use-package recentf
       :init
       (recentf-mode 1)
       :bind (("C-x C-r" . jg/recentf-open-files))
       :config
       ;; See https://github.com/raxod502/selectrum/wiki/Useful-Commands#switch-to-recent-file
       (defun jg/recentf-open-files ()
	 "Use `completing-read' to open a recent file."
	 (interactive)
	 (let ((files (mapcar 'abbreviate-file-name recentf-list)))
	   (find-file (completing-read "Find recent file: " files nil t)))))

     (use-package ibuffer
       :init
       (global-set-key (kbd "C-x C-b") 'ibuffer))
   #+end_src

** Emacs Package Repos
   :PROPERTIES:
   :ID:       dce52bfd-6259-41d2-abe4-29e78e5f03af
   :END:
   #+begin_src emacs-lisp
     ;; Enable MELPA repo.
     ;; See https://github.com/melpa/melpa#usage
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   #+end_src

** Misc
   :PROPERTIES:
   :ID:       9ba89688-bb64-479d-88ac-703b1c7f7193
   :END:

   Miscellaneous packages

   #+begin_src emacs-lisp
     (use-package bug-hunter :ensure)
     (use-package discover-my-major :ensure)
     (use-package hydra :ensure)
     (use-package jinja2-mode :ensure)
     (use-package json-mode :ensure)

     (use-package page-break-lines :ensure)
     (use-package pdf-tools :ensure)
     (use-package paradox :ensure)
     (use-package systemd :ensure)
     (use-package undo-tree :ensure)
     (use-package yaml-mode :ensure)
     (use-package elpher :ensure)

     (use-package writeroom-mode :ensure)
     (use-package olivetti :ensure)

     (use-package rainbow-delimiters
       :ensure
       :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

     (use-package dired-subtree
       :ensure
       :config
       (bind-keys :map dired-mode-map
		  ("i" . dired-subtree-insert)
		  (";" . dired-subtree-remove)))

     ;; Projects based on version control repo presence (e.g. git). Excellent!
     (use-package projectile
       :ensure
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))

     (use-package expand-region
       :ensure
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+end_src

** Look & Feel
   :PROPERTIES:
   :ID:       fd62527e-3186-4f0d-b663-ff4728d5f6f2
   :END:

   Emacs Themes.

   See:
   - [[https://emacsthemes.com/][emacsthemes.com]]
   - [[https://peach-melpa.org/][peach-melpa.org]]

   #+begin_src emacs-lisp
     ;; Various theme and theme-related packages.
     (use-package all-the-icons :ensure)
     (use-package doom-modeline
       :ensure
       :init (doom-modeline-mode 1))
     (use-package doom-themes :ensure)
     (use-package laguna-theme :ensure)
     (use-package almost-mono-themes :ensure)
     (use-package monotropic-theme :ensure)

     (use-package solo-jazz-theme)

     ;; Pulse modified region.
     (use-package goggles
       :ensure
       :demand t
       :config
       (goggles-mode)
       (setq-default goggles-pulse t)) ;; set to nil to disable pulsing

     ;; Apparently the modus- themes have been accepted into upstream
     ;; emacs, so remove them here once released versions begin to include
     ;; them.
     (use-package modus-operandi-theme :ensure)
     (use-package modus-vivendi-theme :ensure)

     ;; Automatic theme-switching based on time of day.
     ;; See https://github.com/guidoschmidt/circadian.el
     (use-package circadian
       :ensure
       :config
       (circadian-setup)

       :custom
       ;; Can get lat/lon from https://www.latlong.net/
       (calendar-latitude 45.501690)
       (calendar-longitude -73.567253)
       (circadian-themes
	'((:sunrise . modus-vivendi)
	  (:sunset . modus-vivendi))))

     (defadvice load-theme (before theme-dont-propagate activate)
       "Advise load-theme to disable all custom themes before loading (enabling) another one.
	See this StackOverflow answer: https://emacs.stackexchange.com/a/3114"
       (mapc #'disable-theme custom-enabled-themes))
   #+end_src

** UI/UX
   :PROPERTIES:
   :ID:       b7339f82-aa91-4770-a62a-873aff27a6c5
   :END:

   #+begin_src emacs-lisp
     ;; Provides multiple named workspaces (or "perspectives").
     ;; See https://github.com/nex3/perspective-el
     (use-package perspective
       :ensure
       :config
       (persp-mode))

     ;; Save/restore layouts.
     (use-package burly :ensure)

     ;; Built-in package that handles binding arbitrary actions to mouse strokes.
     (use-package strokes
       :init
       (strokes-mode)
       (setq strokes-use-strokes-buffer t)) ; Draw strokes to the screen
   #+end_src

** Shell
   :PROPERTIES:
   :ID:       2ecbc734-8793-48c8-8a6e-4a1ef14f19d3
   :END:

   #+begin_src emacs-lisp
     (use-package vterm :ensure)

     ;; Helps you to use shell easily on Emacs. Only one key action to work.
     (use-package shell-pop
       :ensure
       :init
       ;; Workaround for annoying shell-pop layout issue.
       ;; See https://github.com/kyagi/shell-pop-el/issues/51#issuecomment-297470855
       (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)

       :custom
       (shell-pop-universal-key "C-;" "Toggle a shell via shell-pop.")
       (shell-pop-shell-type
	(if (fboundp 'vterm)
	    '("vterm" "*vterm*" #'vterm)
	  '("eshell", "*eshell*", #'eshell))))
   #+end_src

** Org-Mode
   :PROPERTIES:
   :ID:       c2cb1498-f04a-4016-bc4e-31cefe1b9fc2
   :END:

   See [[https://orgmode.org][orgmode.org]].

   #+begin_src emacs-lisp
     ;; NOTE: No need for :ensure, use version included with Emacs.
     (use-package org
       :init
       (make-directory org-directory t) ; Ensure org-directory exists.

       :config
       ;; See https://orgmode.org/manual/Activation.html
       (global-set-key (kbd "C-c l") 'org-store-link)
       (global-set-key (kbd "C-c a") 'org-agenda)
       (global-set-key (kbd "C-c c") 'org-capture)

       :custom
       (org-startup-with-inline-images t)
       (org-image-actual-width nil)
       (org-default-notes-file "notes.org")

       (org-capture-templates
	'(("t" "Todo" entry (file+headline "todo.org" "Tasks")
	   "* TODO %?\n  %i\n  %a")

	  ("j" "Journal" entry (file+datetree "journal.org")
	   "* %?\nEntered on %U\n  %i\n  %a"))))

     (use-package ob-go)

     ;; Use unicode bullet characters in org-mode.
     ;; To customize, see https://github.com/integral-dw/org-superstar-mode/blob/master/DEMO.org
     (use-package org-superstar
       :ensure
       :init
       (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
       :custom
       ;; Set different bullets, with one getting a terminal fallback.
       (org-superstar-headline-bullets-list '("◉" "○" "🞛" "▷")))

     (use-package org-sidebar
       :ensure
       :after (general)
       :config
       (leader-def :infix "o"
		   "b" 'org-sidebar-backlinks))
   #+end_src

*** Zettelkasten
    :PROPERTIES:
    :ID:       892f130d-0e3c-44a2-97c6-51851b2081d2
    :END:

    #+begin_src emacs-lisp
      ;; DISABLE org-z for now (testing org-roam instead).

      ;; FIXME: Enable when working. Review packaging / package installation.
      ;; (use-package org-z
      ;;   :config
      ;;   (org-z-mode 1))

      ;; ;; FIXME: Not available via method I've installed it.
      ;; (use-package org-z-selectrum)

      (use-package org-roam
	:ensure
	:hook
	(after-init . org-roam-mode)
	:init
	(make-directory org-roam-directory t)
	:custom
	(org-roam-directory (concat org-directory "/roam"))
	:bind (:map org-roam-mode-map
		    (("C-c n l" . org-roam)
		     ("C-c n f" . org-roam-find-file)
		     ("C-c n g" . org-roam-graph))
		    :map org-mode-map
		    (("C-c n i" . org-roam-insert))
		    (("C-c n I" . org-roam-insert-immediate))))
    #+end_src

*** Slides

    #+name: org-present
    | pros        | cons |
    |-------------+------|
    | very simple |      |

    #+name: org-tree-slide
    | pros        | cons |
    |-------------+------|
    | very simple |      |


    #+name: org-mode slides
    #+begin_src emacs-lisp
      ;; A presentation tool for org-mode based on the visibility of outline trees
      (use-package org-tree-slide :ensure)

      ;; Good-lookinig Emacs presentations based on org files.
      (use-package zpresent :ensure)

      ;; Ultra-minimalist presentation minor-mode for Emacs org-mode.
      (use-package org-present
	:ensure
	:init
	(add-hook 'org-present-mode-hook
		  (lambda ()
		    (org-present-big)
		    (org-present-hide-cursor)
		    (org-present-read-only)))

	(add-hook 'org-present-mode-quit-hook
		  (lambda ()
		    (org-present-small)
		    (org-present-show-cursor)
		    (org-present-read-write))))
    #+end_src

** Programming                                                  :programming:
*** Git
    :PROPERTIES:
    :ID:       ce89f275-2463-4ca5-9d27-9325942bbcda
    :END:
    #+begin_src emacs-lisp
      (use-package magit :ensure)
      (use-package gitignore-mode :ensure)
    #+end_src

*** LSP                                                                 :lsp:
    :PROPERTIES:
    :ID:       fc767019-9579-4f0a-bfd5-df7bd656062a
    :END:

    [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol (LSP)]].

    #+begin_src emacs-lisp
      (use-package lsp-mode
	:ensure
	:commands (lsp lsp-deferred)
	:hook (go-mode . lsp-deferred))

      (use-package lsp-ui
	:ensure
	:commands lsp-ui-mode
	:init
	(setq lsp-ui-doc-enable t
	      lsp-ui-peek-enable t
	      lsp-ui-sideline-enable t
	      lsp-ui-imenu-enable t
	      lsp-ui-flycheck-enable t))
    #+end_src
*** Snippets
    :PROPERTIES:
    :ID:       9edb71fc-4d13-442e-b7d2-7264a7fcdb5b
    :END:

    Snippets via YASnippet.

    See http://joaotavora.github.io/yasnippet/index.html

    #+begin_src emacs-lisp
      (use-package yasnippet
	:ensure
	:init
	(yas-global-mode 1)
	:custom
	(yas-snippet-dirs '("~/.config/nixpkgs/files/emacs/snippets")))
    #+end_src

*** Emacs Lisp                                                         :lisp:
    :PROPERTIES:
    :ID:       f4aaceb8-ddb4-49cd-aa63-32ce743d1b23
    :END:

    #+begin_src emacs-lisp
      ;; Enable jump-to-definition with M-. and M-,
      (use-package elisp-slime-nav
	:ensure
	:after (elisp-mode ielm)
	:hook (emacs-lisp-mode ielm-mode))
    #+end_src

*** Go                                                                   :go:
    :PROPERTIES:
    :ID:       92ca2abc-410e-4ffb-b86d-c2e1d427ab78
    :END:

    Go programming.

    See: https://arenzana.org/2019/12/emacs-go-mode-revisited/

    #+begin_src emacs-lisp
      (use-package go-mode
	:ensure
	:defer t
	:after lsp
	:mode ("\\.go\\'" . go-mode)

	:init
	(display-line-numbers-mode 1) ; FIXME: Only want this to apply for
					      ; Go files, but as configured, applies
					      ; to all files!
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t)

	:bind (("M-," . compile)
	       ("M-." . godef-jump))

	:custom
	(compile-command "echo Building... && go build -v && echo Testing... && go test -v && echo Linting... && golangci-lint")
	(compilation-read-command nil))
    #+end_src

*** Nix                                                                 :nix:
    :PROPERTIES:
    :ID:       d5c7d0da-5d1e-4663-a85c-d63ae1085f3c
    :END:
    #+begin_src emacs-lisp
      (use-package nix-mode :ensure)
    #+end_src
*** CUE                                                                 :cue:

    Consider using [[https://github.com/jdbaldry/cue-mode][cue-mode]].

*** Python                                                     :python:empty:
*** Javascript / TypeScript                                :javascript:empty:
*** Ruby                                                         :ruby:empty:
** DevOps                                                            :devops:
*** Docker
    :PROPERTIES:
    :ID:       a97efd6c-7851-49cd-97c3-21b2ec9a1dea
    :END:

    #+begin_src emacs-lisp
      (use-package docker
	:ensure t
	:bind ("C-c d" . docker))

      (use-package dockerfile-mode :ensure)
    #+end_src

*** Kubernetes
    :PROPERTIES:
    :ID:       83ad06d1-a157-4a88-9a57-fce519e3ca1e
    :END:

    Packages for interacting with Kubernetes.

    #+begin_src emacs-lisp
      ;; See https://github.com/chrisbarrett/kubernetes-el
      (use-package kubernetes
	:ensure t
	:commands (kubernetes-overview))

      ;; See https://github.com/abrochard/kubel
      (use-package kubel :ensure)
    #+end_src

*** Ansible
    :PROPERTIES:
    :ID:       d928baaf-7e3e-4cf0-b451-148db231adc1
    :END:

    #+begin_src emacs-lisp
      (use-package ansible
	:ensure
	:init
	(add-hook 'yaml-mode-hook '(lambda () (ansible 1))))
    #+end_src

** Completion
   :PROPERTIES:
   :ID:       252fae67-6a95-447f-b529-054208c091f6
   :END:

   Completion mode settings.

   See:
   - [[https://www.youtube.com/watch?v=IDkx48JwDco][Emacs: fuzzy find files (fzf, ripgrep, Ivy+Counsel)]]
   - [[https://www.youtube.com/watch?v=43Dg5zYPHTU][Emacs: completion framework (Embark,Consult,Orderless,etc.)]]

   #+BEGIN_SRC emacs-lisp
     ;; Better solution for incremental narrowing in Emacs.
     (use-package selectrum
       :ensure
       :init
       (selectrum-mode +1))

     ;; Simple but effective sorting and filtering for Emacs.
     (use-package prescient
       :ensure
       :commands prescient-persist-mode
       :init
       ;; Save command history on disk, so that sorting gets more intelligent over time.
       (prescient-persist-mode 1)
       :custom
       (prescient-filter-method '(literal regexp initialism fuzzy)))

     ;; Use prescient sorting with Company.
     (use-package company-prescient :ensure)

     ;; Use prescient sorting with Selectrum.
     (use-package selectrum-prescient
       :ensure
       :init
       ;; Make sorting and filtering more intelligent.
       (selectrum-prescient-mode +1))

     ;; Company mode is a standard completion package that works well with lsp-mode.
     ;; company-lsp integrates company mode completion with lsp-mode.
     ;; completion-at-point also works out of the box but doesn't support snippets.
     (use-package company
       :ensure
       :hook (after-init . global-company-mode))

     (use-package company-lsp
       :ensure
       :commands company-lsp)
   #+END_SRC
** Media
*** RSS/Atom Feeds
    :PROPERTIES:
    :ID:       52508cea-200d-41bd-8759-62ca74da1fd0
    :END:

    #+begin_src emacs-lisp
      (use-package elfeed :ensure)

      (use-package elfeed-org
	:ensure
	:config
	(elfeed-org)

	:custom
	(rmh-elfeed-org-files (list "~/.config/emacs/elfeed.org")))

      ;; (use-package elfeed-dashboard
      ;;   :load-path "~/.config/emacs/lisp/elfeed-dashboard"
      ;;   :config (progn
      ;; 	    (setq elfeed-dashboard-file "~/.config/emacs/lisp/elfeed-dashboard/elfeed-dashboard.org")
      ;; 	    ;; to update feed counts automatically
      ;; 	    (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links)))
    #+end_src
*** Multimedia
    :PROPERTIES:
    :ID:       0e06b145-e172-4005-bef6-1bc3ea2de60f
    :END:

    Use bongo to play audio and video.

    #+begin_src emacs-lisp
      (use-package bongo
	:ensure
	:custom
	(bongo-custom-backend-matchers
	 `((mpv local-file "opus"))
	 "It seems bongo doesn't play opus files by default. Let's fix that!"))

      ;; Maybe remove this? Review pros/cons.
      ;; youtube-dl on the CLI seems to download less (e.g. via "youtube-dl -x URL")
      (use-package ytdl :ensure)
    #+end_src
** Communication
*** BBDB
    :PROPERTIES:
    :ID:       401E0A55-DCC7-452E-BB3F-27FC90D8D91A
    :END:

    #+begin_src emacs-lisp
      (use-package bbdb :ensure)
    #+end_src

** Key Bindings
   :PROPERTIES:
   :ID:       7ee3cd8e-26ad-4d13-983e-11d11a80edb5
   :END:

   Configuration relating mainly to key binding.

   See `M-x describe-personal-keybindings`.

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
     (setq compilation-scroll-output t)

     (use-package dumb-jump
       :ensure
       :bind (("M-g o" . dumb-jump-go-other-window)
	      ("M-g j" . dumb-jump-go)
	      ("M-g b" . dumb-jump-back)
	      ("M-g i" . dumb-jump-go-prompt)
	      ("M-g x" . dumb-jump-go-prefer-external)
	      ("M-g z" . dumb-jump-go-prefer-external-other-window))
       :custom
       (dumb-jump-selector 'completing-read "completing-read is for use with selectrum"))

     (defhydra dumb-jump-hydra (:color blue :columns 3)
       "Dumb Jump"
       ("j" dumb-jump-go "Go")
       ("o" dumb-jump-go-other-window "Other window")
       ("e" dumb-jump-go-prefer-external "Go external")
       ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
       ("i" dumb-jump-go-prompt "Prompt")
       ("l" dumb-jump-quick-look "Quick look")
       ("b" dumb-jump-back "Back"))


     ;; NOTES:
     ;;   - Not in (M)ELPA yet, do not :ensure.
     ;;   - Watching for a first non-pre-release on GH, see https://github.com/countvajhula/rigpa/issues/1#issuecomment-743849934
     ;; (use-package rigpa
     ;;   :config
     ;;   (setq rigpa-mode t))

     ;;   ;; navigating meta modes
     ;;   (global-set-key (kbd "s-m s-m") 'rigpa-flashback-to-last-tower)
     ;;   (global-set-key (kbd "C-<escape>") 'my-enter-tower-mode)
     ;;   (global-set-key (kbd "M-<escape>") 'my-enter-mode-mode)
     ;;   (global-set-key (kbd "s-<escape>") 'my-enter-mode-mode)
     ;;   (global-set-key (kbd "M-<return>")
     ;; 		  (lambda ()
     ;; 		    (interactive)
     ;; 		    (rigpa-enter-selected-level)
     ;; 		    (let ((ground (rigpa--get-ground-buffer)))
     ;; 		      (my-exit-mode-mode)
     ;; 		      (switch-to-buffer ground))))
     ;;   (global-set-key (kbd "s-<return>")
     ;; 		  (lambda ()
     ;; 		    (interactive)
     ;; 		    (rigpa-enter-selected-level)
     ;; 		    (let ((ground (rigpa--get-ground-buffer)))
     ;; 		      (my-exit-mode-mode)
     ;; 		      (switch-to-buffer ground))))
     ;;   (global-set-key (kbd "C-<return>")
     ;; 		  (lambda ()
     ;; 		    (interactive)
     ;; 		    (my-exit-tower-mode)
     ;; 		    (my-enter-mode-mode))))
     ;;
     ;; ;; indexed entry to various modes
     ;; (global-set-key (kbd "s-n") 'evil-normal-state)
     ;; (global-set-key (kbd "s-y")        ; symex mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "symex")))
     ;; (global-set-key (kbd "s-;") (kbd "s-y"))
     ;; (global-set-key (kbd "s-w")        ; window mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "window")))
     ;; (global-set-key (kbd "s-v")        ; view mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "view")))
     ;; (global-set-key (kbd "s-x")        ; char mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "char")))
     ;; (global-set-key (kbd "s-a")        ; activity mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "activity")))
     ;; (global-set-key (kbd "s-z")        ; text mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "text")))
     ;; (global-set-key (kbd "s-g")        ; history mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "history")))
     ;; (global-set-key (kbd "s-i")        ; system mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "system")))
     ;; (global-set-key (kbd "s-b")        ; buffer mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "buffer")))
     ;; (global-set-key (kbd "s-f")        ; file mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "file")))
     ;; (global-set-key (kbd "s-t")        ; tab mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "tab")))
     ;; (global-set-key (kbd "s-l")        ; line mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "line")))
     ;; (global-set-key (kbd "s-e")        ; application mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "application")))
     ;; (global-set-key (kbd "s-r")        ; word mode
     ;;                 (lambda ()
     ;;                   (interactive)
     ;;                   (rigpa-enter-mode "word"))))
   #+end_src
  
** Thin Ice!
   :PROPERTIES:
   :ID:       cc78bcc7-efbc-4243-a937-1de64fb84fa4
   :END:

   This is an area for things I suspect I don't need, but am not
   completely sure about deleting yet. On thin ice!

   #+BEGIN_SRC emacs-lisp
     (setq compilation-window-height 14)

     (defun my-compilation-hook ()
       (when (not (get-buffer-window "*compilation*"))
	 (save-selected-window
	   (save-excursion
	     (let* ((w (split-window-vertically))
		    (h (window-height w)))
	       (select-window w)
	       (switch-to-buffer "*compilation*")
	       (shrink-window (- h compilation-window-height)))))))

     (add-hook 'compilation-mode-hook 'my-compilation-hook)
   #+END_SRC

