#+TITLE: Literate Emacs configuration using org-mode
#+SUBTITLE: A Emacs Lisp journey
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el
#+TODO: TODO DOING BLOCKED | DONE

* Overview

  Literate Emacs configuration using org-mode.

  See https://orgmode.org/worg/org-contrib/babel/intro.html#emacs-initialization

** Goals [1/5]

   What do I want from Emacs?
   
*** TODO Ultimate Developer Experience (DX) [2/11]
    - [X] Git (magit)
    - [X] Reproducible editor package (via Nix)
    - [ ] Go (format, compile, test, jump-to-definition, debug)
    - [ ] Nix (format)
    - [ ] CUE (format, highlight)
    - [ ] NodeJS
    - [ ] Python
    - [ ] Fuzzy-find (rg/fzf integration, prot window)
    - [ ] Snippets
    - [ ] Completion
*** DONE Excellent DevOps experience [2/2]
    - [X] Docker (docker)
    - [X] Kubernetes (kubernetes-overview, kubel)
*** TODO Ultimate Hackability [0/5]
    - [ ] Write 10 custom functions
    - [ ] Write a custom minor mode
    - [ ] Write a custom major mode
    - [ ] Add language support for an unsupported language (e.g. CUE)
    - [ ] Create a custom theme (e.g. via `M-x customize-create-theme`)
*** DOING Integrated daily drivers [4/10]
    - [X] web (eww BUT sometimes hangs? Performance mediocre)
    - [X] music (bongo w/ mpv backend)
    - [-] videos (bongo w/ mpv backend)
      - [X] local videos
      - [ ] youtube etc.
    - [X] RSS (elfeed)
      - [ ] Central elfeed file on server?
    - [X] shell (eshell + vterm)
    - [ ] Slack
    - [ ] email
    - [ ] image viewer
    - [ ] slides
    - [ ] making art (drawing, music, writing/blogging, etc)
*** TODO Looks stunning [0/2]
    - [ ] multi-font theme(s)
    - [ ] awesome colorscheme
    - [ ] Look into prot's bullet points, fonts, etc
** Comparison with alternatives

   I used VIM as my primary text editor for ~15 years (although I also
   dabbled in Emacs and Plan9's ACME during that period). I then
   switched to Emacs full-time in 2020. This table describes some of
   the reasons why.

   #+NAME: Emacs vs. Alternatives
   | Feature  | Emacs        | VIM              | Acme                                | VSCode     |
   |----------+--------------+------------------+-------------------------------------+------------|
   | language | Emacs Lisp   | VimScript        | any                                 | JavaScript |
   | scope    | kitchen sink | text-editor plus | integrating development environment | minimal    |
   |          |              |                  |                                     |            |
** Emacs Startup

   Emacs startup follows [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][this approach]].

* Foundations

** Customize

   Settings having to do with emacs' customize facility (see 'M-x customize').

   Consider one day moving away from using customize altogether.
   See for example: https://tech.toryanderson.com/2020/11/13/migrating-to-a-custom-file-less-setup/

   #+begin_src emacs-lisp
     ;; Use a *separate* file for customizations.
     ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html#Saving-Customizations
     (setq custom-file "~/.config/emacs/custom.el")

     ;; Load custom theme(s) from here. Currently using solo-jazz.el.
     (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

     (load custom-file)
   #+end_src

** Non-Customize
   #+begin_src emacs-lisp
     (use-package emacs
       :init
       (tool-bar-mode -1)
       (scroll-bar-mode -1)
       (setq	echo-keystrokes 0.1          ; Show keystrokes ASAP
	     inhibit-startup-message t
	     initial-scratch-message nil
	     auto-fill-mode t
	     browse-url-browser-function 'eww-browse-url   ; Browse with eww by default
	     backup-directory-alist '(("" . "~/.config/emacs/backup"))))


   #+end_src
   
* Packages
** Emacs Package Repos
   #+begin_src emacs-lisp
     ;; Enable MELPA repo.
     ;; See https://github.com/melpa/melpa#usage
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   #+end_src

** Misc
   Miscellaneous packages

   #+begin_src emacs-lisp
     (use-package bug-hunter :ensure)
     (use-package discover-my-major :ensure)
     (use-package hydra :ensure)
     (use-package jinja2-mode :ensure)
     (use-package json-mode :ensure)
     (use-package olivetti :ensure)
     (use-package page-break-lines :ensure)
     (use-package paradox :ensure)
     (use-package systemd :ensure)
     (use-package undo-tree :ensure)
     (use-package yaml-mode :ensure)
     (use-package elpher :ensure)
     (use-package vterm :ensure)

     (use-package rainbow-delimiters
       :ensure
       :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

     ;; Error at startup --- why? Check if properly installed by Nix.
     (use-package dired-subtree
       :ensure
       :config
       (bind-keys :map dired-mode-map
		  ("i" . dired-subtree-insert)
		  (";" . dired-subtree-remove)))
   #+end_src

** Themes

   Emacs Themes.

   See:
   - [[https://emacsthemes.com/][emacsthemes.com]]
   - [[https://peach-melpa.org/][peach-melpa.org]]

   #+begin_src emacs-lisp
     (use-package all-the-icons :ensure)

     ;; Theme packages
     (use-package doom-themes :ensure)
     (use-package laguna-theme :ensure)
     (use-package almost-mono-themes :ensure)

     ;; Apparently the modus- themes have been accepted into upstream
     ;; emacs, so remove them here once released versions begin to include
     ;; them.
     (use-package modus-operandi-theme :ensure)
     (use-package modus-vivendi-theme :ensure)

     ;; Use unicode bullet characters in org-mode.
     (use-package org-bullets
       :ensure
       :init
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

     ;; Theme-switching for Emacs based on daytime
     ;; See https://github.com/guidoschmidt/circadian.el
     (use-package circadian
       :ensure
       :config
       (setq circadian-themes '(("8:00" . solo-jazz)
				("19:00" . laguna)))
       (circadian-setup))


     (defadvice load-theme (before theme-dont-propagate activate)
       "Advise load-theme to disable all custom themes before loading (enabling) another one.

	  See this StackOverflow answer: https://emacs.stackexchange.com/a/3114"
       (mapc #'disable-theme custom-enabled-themes))

   #+end_src

** Programming
*** Git
    #+begin_src emacs-lisp
      (use-package magit :ensure)
      (use-package gitignore-mode :ensure)
    #+end_src
*** LSP                                                                 :lsp:

    [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol (LSP)]].

    #+begin_src emacs-lisp
      (use-package lsp-mode
	:ensure
	:commands (lsp lsp-deferred)
	:hook (go-mode . lsp-deferred))

      (use-package lsp-ui
	:ensure
	:commands lsp-ui-mode
	:init
	(setq lsp-ui-doc-enable t
	      lsp-ui-peek-enable t
	      lsp-ui-sideline-enable t
	      lsp-ui-imenu-enable t
	      lsp-ui-flycheck-enable t))
    #+end_src
*** Go                                                                   :go:

    Go programming.
   
    #+begin_src emacs-lisp
      ;; Go Settings.
      ;; See: https://arenzana.org/2019/12/emacs-go-mode-revisited/

      (defun custom-go-mode ()
	"Custom settings for go-mode"
	(display-line-numbers-mode 1)
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t))

      (use-package go-mode
	:defer t
	:ensure
	:mode ("\\.go\\'" . go-mode)
	:init
	(setq compile-command "echo Building... && go build -v && echo Testing... && go test -v && echo Linter... && golangci-lint")
	(setq compilation-read-command nil)
	:hook custom-go-mode
	:bind (("M-," . compile)
	       ("M-." . godef-jump)))
    #+end_src

*** Nix                                                                 :nix:
    #+begin_src emacs-lisp
      (use-package nix-mode :ensure)
    #+end_src
*** CUE                                                                 :cue:
    TODO
*** Python
    TODO
*** Javascript / TypeScript
    TODO
*** Ruby
** DevOps
*** Docker

    #+begin_src emacs-lisp
      (use-package docker
	:ensure t
	:bind ("C-c d" . docker))

      (use-package dockerfile-mode :ensure)
    #+end_src

*** Kubernetes

    Packages for interacting with Kubernetes.
    
    #+begin_src emacs-lisp
      ;; See https://github.com/chrisbarrett/kubernetes-el
      (use-package kubernetes
	:ensure t
	:commands (kubernetes-overview))

      ;; See https://github.com/abrochard/kubel
      (use-package kubel :ensure)
    #+end_src

** Completion

   IDO mode settings.

   See https://masteringemacs.org/article/introduction-to-ido-mode

   #+BEGIN_SRC emacs-lisp
     (require 'ido)
     (ido-mode t)
     (setq ido-enable-flex-matching t
	   ido-everywhere t
	   ido-create-new-buffer 'always)
   #+END_SRC
** Media
*** RSS/Atom Feeds

    #+begin_src emacs-lisp
      (use-package elfeed :ensure)
      (use-package elfeed-org
	:ensure
	:config
	(elfeed-org)
	(setq rmh-elfeed-org-files (list "~/.config/emacs/elfeed.org")))
    #+end_src
*** Multimedia

    Use bongo to play audio and video.
   
    #+begin_src emacs-lisp
      (use-package bongo
	:ensure
	:init
	;; It seems bongo doesn't play opus files by default. Let's fix that!
	(setq bongo-custom-backend-matchers
	      `((mpv local-file "opus"))))

      ;; Maybe remove this? Review pros/cons.
      ;; youtube-dl on the CLI seems to download less (e.g. via "youtube-dl -x URL")
      (use-package ytdl :ensure)
    #+end_src
** Key Bindings

   Configuration relating mainly to key binding.

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
     (setq compilation-scroll-output t)

     (use-package dumb-jump
       :ensure
       :bind (("M-g o" . dumb-jump-go-other-window)
	      ("M-g j" . dumb-jump-go)
	      ("M-g b" . dumb-jump-back)
	      ("M-g i" . dumb-jump-go-prompt)
	      ("M-g x" . dumb-jump-go-prefer-external)
	      ("M-g z" . dumb-jump-go-prefer-external-other-window))
       :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
       )

     (defhydra dumb-jump-hydra (:color blue :columns 3)
       "Dumb Jump"
       ("j" dumb-jump-go "Go")
       ("o" dumb-jump-go-other-window "Other window")
       ("e" dumb-jump-go-prefer-external "Go external")
       ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
       ("i" dumb-jump-go-prompt "Prompt")
       ("l" dumb-jump-quick-look "Quick look")
       ("b" dumb-jump-back "Back"))
   #+end_src
  
** Thin Ice!

   This is an area for things I suspect I don't need, but am not
   completely sure about deleting yet. On thin ice!

   #+BEGIN_SRC emacs-lisp
     ;; Company mode is a standard completion package that works well with lsp-mode.
     ;; company-lsp integrates company mode completion with lsp-mode.
     ;; completion-at-point also works out of the box but doesn't support snippets.
     (use-package company
       :ensure
       :config
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 1))

     (use-package company-lsp
       :ensure
       :commands company-lsp)

     ;; Optional - provides snippet support.
     (use-package yasnippet
       :ensure
       :commands yas-minor-mode
       :hook (go-mode . yas-minor-mode))

     (setq compilation-window-height 14)
     (defun my-compilation-hook ()
       (when (not (get-buffer-window "*compilation*"))
	 (save-selected-window
	   (save-excursion
	     (let* ((w (split-window-vertically))
		    (h (window-height w)))
	       (select-window w)
	       (switch-to-buffer "*compilation*")
	       (shrink-window (- h compilation-window-height)))))))
     (add-hook 'compilation-mode-hook 'my-compilation-hook)

     (use-package projectile
       :ensure
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))
   #+END_SRC

* Resources
** Learning

   Useful Emacs learning resources.

   - [[https://github.com/jtmoulia/elisp-koans][Elisp Koans]]
   - [[https://github.com/chrisdone/elisp-guide][Elisp Guide]]
   - [[https://www.youtube.com/watch?v=RiXK7NALgRs&list=PL8Bwba5vnQK14z96Gil86pLMDO2GnOhQ6][Emacs Videos by Protesilaos Stavrou]]
   - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
   - [[https://github.com/p3r7/awesome-elisp][Awesome Elisp]]

** Emacs Init Files

   Some other org-mode init files.

   - https://github.com/EgorDuplensky/emacs-init-org/blob/master/my-init.org
   - https://github.com/dariushazimi/emacsdotfiles/blob/master/myinit-linux.org
   - https://github.com/globz/emacs-conf/blob/master/init.org
   - https://raw.githubusercontent.com/AlexStragies/EmacsConfig/master/emacs.org
   - https://raw.githubusercontent.com/EgorDuplensky/emacs-init-org/master/my-init.org
   - https://raw.githubusercontent.com/gitten/.emacs.d/master/config.org
   - https://raw.githubusercontent.com/vhallac/literate.emacs.d/master/Startup.org
   - https://protesilaos.com/dotemacs/
   - https://gitlab.com/protesilaos/dotfiles/-/raw/master/emacs/.emacs.d/emacs-init.org
   - https://justin.abrah.ms/dotfiles/emacs.html
