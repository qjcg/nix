#+TITLE: Literate Emacs configuration using org-mode
#+SUBTITLE: An Emacs Lisp journey
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el
#+FILETAGS: emacs
#+TODO: TODO(t) BLOCKED(b) | DONE(d) CANCELLED(c)
#+STARTUP: content

[[./EmacsIcon.svg]]

* Overview

  Literate Emacs configuration using org-mode.

  See https://orgmode.org/worg/org-contrib/babel/intro.html#emacs-initialization

** Goals [1/6]

   What do I want from Emacs?

*** TODO Provide ultimate Developer Experience (DX) [6/10]
    - [X] Git (magit)
    - [X] Reproducible editor package (via Nix)
    - [X] Snippets (yasnippets)
    - [X] Fuzzy-find (rg/fzf integration, prot window)
    - [X] Completion
    - [X] Nix (format)
    - [ ] Go (format, compile, test, jump-to-definition, debug)
    - [ ] CUE (format, highlight)
    - [ ] NodeJS
    - [ ] Python
*** DONE Provide excellent DevOps experience [2/2]
    - [X] Docker (docker)
    - [X] Kubernetes (kubernetes-overview, kubel)
*** TODO Provide integrated daily drivers [3/10]
    - [X] web (eww BUT sometimes hangs? Performance mediocre)
    - [X] music (bongo w/ mpv backend)
    - [-] videos (bongo w/ mpv backend)
      - [X] local videos
      - [ ] youtube etc.
    - [ ] RSS (elfeed)
      - [ ] Central elfeed file on server?
    - [X] shell (eshell + vterm)
    - [-] Slack
      - [X] Read channels
      - [ ] Receive notifications
    - [ ] email
    - [ ] image viewer
    - [ ] slides
    - [ ] making art (drawing, music, writing/blogging, etc)
*** TODO Provide stunning looks [1/3]
    - [X] Look into prot's bullet points, fonts, etc
    - [ ] multi-font theme(s)
    - [ ] awesome colorscheme
*** TODO Provide ultimate hackability [0/5]
    - [ ] Write 10 custom functions
    - [ ] Write a custom minor mode
    - [ ] Write a custom major mode
    - [ ] Add language support for an unsupported language (e.g. CUE)
    - [ ] Create a custom theme (e.g. via `M-x customize-create-theme`)
*** TODO Provide OrgMode ExoBrain [3/7]

    See [[https://github.com/JSmurf/awesome-org][awesome-org]].

    - [X] Todo lists
      - [X] Personal
      - [X] Work
    - [X] Agenda
    - [X] Journal (via org-dailies)
    - [ ] Sync (via Syncthing etc)
    - [ ] Capture
      - [ ] Todo items
      - [ ] Web bookmarks (from browser)
    - [ ] Evaluate related packages
    - [ ] Add Wrike custom link type (e.g. "wrike:12345")

** Comparison with alternatives

   I used VIM as my primary text editor for ~15 years (although I also
   dabbled in Emacs and Plan9's ACME during that period). I then
   switched to Emacs full-time in 2020. This table describes some of
   the reasons why.

   #+NAME: Emacs vs. Alternatives
   | Feature  | Emacs        | VIM              | Acme                                | VSCode     |
   |----------+--------------+------------------+-------------------------------------+------------|
   | language | Emacs Lisp   | VimScript        | any                                 | JavaScript |
   | scope    | kitchen sink | text-editor plus | integrating development environment | minimal    |

** References
*** Learning

    Useful Emacs learning resources.

    - [[https://github.com/jtmoulia/elisp-koans][Elisp Koans]]
    - [[https://github.com/chrisdone/elisp-guide][Elisp Guide]]
    - [[https://www.youtube.com/watch?v=RiXK7NALgRs&list=PL8Bwba5vnQK14z96Gil86pLMDO2GnOhQ6][Emacs Videos by Protesilaos Stavrou]]
    - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
    - [[https://github.com/p3r7/awesome-elisp][Awesome Elisp]]
    - [[http://caiorss.github.io/Emacs-Elisp-Programming/][Emacs in a Box]]
    - [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][The Emacs startup process]]

*** Emacs Init Files

    Some other init files.

    - https://github.com/EgorDuplensky/emacs-init-org/blob/master/my-init.org
    - https://github.com/dariushazimi/emacsdotfiles/blob/master/myinit-linux.org
    - https://github.com/globz/emacs-conf/blob/master/init.org
    - https://raw.githubusercontent.com/AlexStragies/EmacsConfig/master/emacs.org
    - https://raw.githubusercontent.com/EgorDuplensky/emacs-init-org/master/my-init.org
    - https://raw.githubusercontent.com/gitten/.emacs.d/master/config.org
    - https://raw.githubusercontent.com/vhallac/literate.emacs.d/master/Startup.org
    - https://protesilaos.com/dotemacs/
    - https://gitlab.com/protesilaos/dotfiles/-/raw/master/emacs/.emacs.d/emacs-init.org
    - https://justin.abrah.ms/dotfiles/emacs.html
    - https://github.com/f1rstperson/dotfiles/tree/master/emacs/config/applications


* Configuration
** TODO Packages to review [2/11]

   Review should have 3 steps: research, pilot, review.

   - [X] burly
   - [X] which-key
   - [ ] strokes (see strokes-mode, strokes-help)
   - [ ] [[https://github.com/countvajhula/rigpa/][rigpa]]
   - [ ] org-projectile
   - [ ] projectile-speedbar
   - [ ] [[https://github.com/emacsmirror/excorporate][excorporate]] (office 365 mail, calendar, ...)
   - [ ] [[https://github.com/kljohann/mpv.el][mpv.el]]
   - [ ] smex (smart "M-x")
   - [ ] paredit (see [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][Structured Guide to Paredit]])
   - [ ] [[http://xelf.me/emacs-mosaic.html][EmacsMosaic]] for [[http://xelf.me/scheme-mosaic.html][SchemeMosaic]] (music creation)

     #+title: Emacs Packages to Review
     | Name           | Description                                                          | URL                                            | Rating |
     |----------------+----------------------------------------------------------------------+------------------------------------------------+--------|
     | org-projectile |                                                                      |                                                |        |
     | rigpa          |                                                                      | AKA "Epistemic Mode". See emacsconf 2020 talk. |        |
     | dashboard      |                                                                      |                                                |        |
     | mu4e           |                                                                      |                                                |        |
     | notmuch        |                                                                      |                                                |        |
     | orderless      | Emacs completion style that matches multiple regexps in any order    | https://github.com/oantolin/orderless          |        |
     | consult        | Various commands to quickly select an item from a list of candidates | https://github.com/minad/consult               |        |
     | embark         | Mini-Buffer Actions Rooted in Keymaps                                | https://github.com/oantolin/embark/            |        |
     | marginalia     | Marginalia in the minibuffer                                         | https://github.com/minad/marginalia            |        |

** TODO Config changes to review [0/8]
   - [ ] [[https://github.com/terlar/emacs-config/blob/master/default.nix#L11-L27][Use Nix to manage emacs init file (tangle init.org, etc)]] (see also:  [[https://github.com/nix-community/emacs-overlay/issues/106][Provide tangled .el file from Org configs]])
   - [ ] [[https://github.com/jjuliano/practical.org.el][Practical GTD and Zettelkasten workflow]]
   - [ ] [[https://yannherklotz.com/blog/2020-12-21-introduction-to-luhmanns-zettelkasten.html][Introduction to Luhmann's Zettelkasten]]
   - [ ] [[https://takeonrules.com/2020/12/18/directory-structure-for-my-org-instance/][Directory structure for my org instance]]
   - [ ] [[http://www.nextpoint.se/?p=834][Static generation for init file?]]
   - [ ] [[http://www.nextpoint.se/?p=845][Byte compile the quickstart file]]
   - [ ] [[https://github.com/alhassy/org-special-block-extras][Use org-special-block-extras for generating HTML and/or LaTeX]]
   - [ ] [[https://github.com/tecosaur/org-pandoc-import][Use org-pandoc-import (convert various file types to org)]]
   - [ ] [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]

** Emacs Basics
   :PROPERTIES:
   :ID:       cd50c59c-387b-4c55-9b98-94dd93268980
   :END:

   See: https://tech.toryanderson.com/2020/11/13/migrating-to-a-custom-file-less-setup/

   #+begin_src emacs-lisp
     ;; TODO: Move appropriate parts of this to site-start.el or defaults.el.
     (use-package emacs
       :init
       (auto-fill-mode)

       ;; Load custom theme(s) from here.
       (add-to-list 'custom-theme-load-path
		    (concat user-emacs-directory "themes"))

       ;; Specify default font without using Customize.
       (when (member "JuliaMono" (font-family-list))
	 (add-to-list 'default-frame-alist '(font . "JuliaMono-20")))

       :custom
       ;; Use a *separate* file for customizations.
       ;; See https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html#Saving-Customizations
       (custom-file (concat user-emacs-directory "custom.el"))

       (backup-directory-alist `(("." . ,(concat user-emacs-directory "backup"))))
       (browse-url-browser-function 'eww-browse-url "Browse with eww by default")
       (display-time-mode t)
       (echo-keystrokes 0.1 "Show keystrokes ASAP")
       (inhibit-startup-screen t)
       (initial-scratch-message nil)
       (menu-bar-mode nil)
       (mouse-yank-at-point t "Yank at point, NOT click (i.e. mouse cursor position).")
       (scroll-bar-mode nil)
       (show-trailing-whitespace nil "Do NOT enable this globally, bad on terminals for example.")
       (tool-bar-mode nil))

     (use-package recentf
       :init
       (recentf-mode 1)
       :bind (("C-x C-r" . jg-recentf-open-files))
       :config
       ;; See https://github.com/raxod502/selectrum/wiki/Useful-Commands#switch-to-recent-file
       (defun jg-recentf-open-files ()
	 "Use `completing-read' to open a recent file."
	 (interactive)
	 (let ((files (mapcar 'abbreviate-file-name recentf-list)))
	   (find-file (completing-read "Find recent file: " files nil t)))))

     (use-package ibuffer
       :init
       (global-set-key (kbd "C-x C-b") 'ibuffer))

     ;; Group buffers in ibuffer list by VC project
     ;; https://github.com/purcell/ibuffer-vc
     (use-package ibuffer-vc
       :ensure
       :config
       (setq ibuffer-formats
	     '((mark modified read-only vc-status-mini " "
		     (name 18 18 :left :elide)
		     " "
		     (size 9 -1 :right)
		     " "
		     (mode 16 16 :left :elide)
		     " "
		     (vc-status 16 16 :left)
		     " "
		     vc-relative-file)))
       :hook (ibuffer . (lambda()
			  (ibuffer-vc-set-filter-groups-by-vc-root)
			  (unless (eq ibuffer-sorting-mode 'alphabetic)
			    (ibuffer-do-sort-by-alphabetic)))))
   #+end_src

** Emacs Package Repos
   :PROPERTIES:
   :ID:       dce52bfd-6259-41d2-abe4-29e78e5f03af
   :END:
   #+begin_src emacs-lisp
     ;; Enable MELPA repo.
     ;; See https://github.com/melpa/melpa#usage
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   #+end_src

** Misc
   :PROPERTIES:
   :ID:       9ba89688-bb64-479d-88ac-703b1c7f7193
   :END:

   Miscellaneous packages

   #+begin_src emacs-lisp
     (use-package bug-hunter :ensure)
     (use-package discover-my-major :ensure)
     (use-package hydra :ensure)

     (use-package page-break-lines :ensure)

     (use-package paradox :ensure)
     (use-package systemd :ensure)
     (use-package undo-tree :ensure)

     (use-package elpher :ensure)

     (use-package rainbow-delimiters
       :ensure
       :hook prog-mode)

     (use-package dired-subtree
       :ensure
       :config
       (bind-keys :map dired-mode-map
		  ("i" . dired-subtree-insert)
		  (";" . dired-subtree-remove)))

     ;; Projects based on version control repo presence (e.g. git). Excellent!
     (use-package projectile
       :ensure
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))

     ;; Emacs front-end for ripgrep, a command line search tool
     ;; Installed for use with projectile-ripgrep.
     ;; https://github.com/nlamirault/ripgrep.el
     (use-package ripgrep :ensure)

     (use-package org-projectile
       :ensure
       :bind (("C-c n p" . org-projectile-project-todo-completing-read))

       :custom
       (org-projectile-projects-file (concat org-directory "/projects.org"))
       (org-agenda-files (append org-agenda-files (org-projectile-todo-files)))

       :config
       (push (org-projectile-project-todo-entry) org-capture-templates))

     (use-package expand-region
       :ensure
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+end_src

** Appearance
   :PROPERTIES:
   :ID:       fd62527e-3186-4f0d-b663-ff4728d5f6f2
   :END:

*** Themes

    Emacs Themes.

    See:
    - [[https://emacsthemes.com/][emacsthemes.com]]
    - [[https://peach-melpa.org/][peach-melpa.org]]

    #+begin_src emacs-lisp
      ;; Themes and theme-related packages.
      (use-package all-the-icons :ensure)
      (use-package almost-mono-themes :ensure)
      (use-package base16-theme :ensure)
      (use-package doom-modeline :ensure :init (doom-modeline-mode 1))
      (use-package doom-themes :ensure)
      (use-package laguna-theme :ensure)
      (use-package monotropic-theme :ensure)
      (use-package solo-jazz-theme)


      ;; Modus Themes
      ;; https://protesilaos.com/modus-themes/
      (use-package modus-themes
        :disabled
	;;:ensure ;; TODO: Remove ensure once part of Emacs.
	:init
	;; Add all your customizations prior to loading the themes
	(setq modus-themes-slanted-constructs t
	      modus-themes-bold-constructs t)

	;; Load the theme files before enabling a theme
	(modus-themes-load-themes)
	:config
	;; Load the theme of your choice:
	(modus-themes-load-vivendi)
	:bind ("<f5>" . modus-themes-toggle))

      (use-package theme-looper
	:ensure
	:config
	(theme-looper-set-favorite-themes '(modus-vivendi
					    base16-icy
					    base16-horizon-dark
					    base16-outrun-dark
					    base16-synth-midnight-dark
					    laguna
					    solo-jazz))

	(global-set-key (kbd "C-}") 'theme-looper-enable-next-theme)
	(global-set-key (kbd "C-{") 'theme-looper-enable-previous-theme)
	(global-set-key (kbd "C-\\") 'theme-looper-enable-random-theme)

	;; NOTE: The functions below rely on the "ivy" package.
	;;(global-set-key (kbd "C-|") 'theme-looper-select-theme)
	;;(global-set-key (kbd "C-M-|") 'theme-looper-select-theme-from-all)
	)


      ;; Don't "layer" themes on top of each other when calling load-theme.
      (defadvice load-theme (before theme-dont-propagate activate)
	"Advise load-theme to disable all custom themes before loading (enabling) another one.
			  See this StackOverflow answer: https://emacs.stackexchange.com/a/3114"
	(mapc #'disable-theme custom-enabled-themes))
    #+end_src

*** Look & Feel

    Non-theme appearance settings.

    #+begin_src emacs-lisp
      ;; Show font at point on mode line.
      (use-package show-font-mode :ensure)

      ;; Pulse modified region.
      (use-package goggles
	:ensure
	:demand t
	:config
	(goggles-mode)
	(setq-default goggles-pulse t)) ;; set to nil to disable pulsing

      ;; A light that follows your cursor around so you don't lose it!
      (use-package beacon
	:ensure
	:config
	(beacon-mode 1)
	:custom
	(beacon-blink-delay 0.5)
	(beacon-blink-duration 0.5))

      (use-package org-variable-pitch
	:ensure
	:after org
	:config
	(set-face-attribute 'org-variable-pitch-fixed-face nil :height 180)
	(set-face-attribute 'org-variable-pitch-fixed-face nil :weight 'regular)

	(add-hook 'org-mode-hook #'org-variable-pitch-minor-mode)

	:custom
	(org-variable-pitch-fontify-headline-prefix t)
	(org-variable-pitch-fixed-font "Roboto"))
    #+end_src

** Tree Navigation

   Filesystem navigation using a tree.

   #+begin_src emacs-lisp
     ;; A tree layout file explorer.
     ;; https://github.com/Alexander-Miller/treemacs
     (use-package treemacs
       :ensure
       :init
       (with-eval-after-load 'winum
	 (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
       :config
       (progn
	 (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
	       treemacs-deferred-git-apply-delay      0.5
	       treemacs-directory-name-transformer    #'identity
	       treemacs-display-in-side-window        t
	       treemacs-eldoc-display                 t
	       treemacs-file-event-delay              5000
	       treemacs-file-extension-regex          treemacs-last-period-regex-value
	       treemacs-file-follow-delay             0.2
	       treemacs-file-name-transformer         #'identity
	       treemacs-follow-after-init             t
	       treemacs-git-command-pipe              ""
	       treemacs-goto-tag-strategy             'refetch-index
	       treemacs-indentation                   2
	       treemacs-indentation-string            " "
	       treemacs-is-never-other-window         nil
	       treemacs-max-git-entries               5000
	       treemacs-missing-project-action        'ask
	       treemacs-move-forward-on-expand        nil
	       treemacs-no-png-images                 nil
	       treemacs-no-delete-other-windows       t
	       treemacs-project-follow-cleanup        nil
	       treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	       treemacs-position                      'left
	       treemacs-read-string-input             'from-child-frame
	       treemacs-recenter-distance             0.1
	       treemacs-recenter-after-file-follow    nil
	       treemacs-recenter-after-tag-follow     nil
	       treemacs-recenter-after-project-jump   'always
	       treemacs-recenter-after-project-expand 'on-distance
	       treemacs-show-cursor                   nil
	       treemacs-show-hidden-files             t
	       treemacs-silent-filewatch              nil
	       treemacs-silent-refresh                nil
	       treemacs-sorting                       'alphabetic-asc
	       treemacs-space-between-root-nodes      t
	       treemacs-tag-follow-cleanup            t
	       treemacs-tag-follow-delay              1.5
	       treemacs-user-mode-line-format         nil
	       treemacs-user-header-line-format       nil
	       treemacs-width                         35
	       treemacs-workspace-switch-cleanup      nil)

	 ;; The default width and height of the icons is 22 pixels. If you are
	 ;; using a Hi-DPI display, uncomment this to double the icon size.
	 ;;(treemacs-resize-icons 44)

	 (treemacs-follow-mode t)
	 (treemacs-filewatch-mode t)
	 (treemacs-fringe-indicator-mode 'always)
	 (pcase (cons (not (null (executable-find "git")))
		      (not (null treemacs-python-executable)))
	   (`(t . t)
	    (treemacs-git-mode 'deferred))
	   (`(t . _)
	    (treemacs-git-mode 'simple))))
       :bind
       (("C-x t t"   . treemacs-select-window)
	("C-x t 1"   . treemacs-delete-other-windows)
	("M-0"       . treemacs) ;; TOGGLE treemacs
	("C-x t B"   . treemacs-bookmark)
	("C-x t C-t" . treemacs-find-file)
	("C-x t M-t" . treemacs-find-tag)

	:map treemacs-mode-map
	([mouse-1] . treemacs-single-click-expand-action)))

     ;; (use-package treemacs-evil
     ;;   :after (treemacs evil)
     ;;   :ensure t)

     (use-package treemacs-projectile
       :ensure
       :after (treemacs projectile))

     (use-package treemacs-icons-dired
       :ensure
       :after (treemacs dired)
       :config (treemacs-icons-dired-mode))

     (use-package treemacs-magit
       :ensure
       :after (treemacs magit))

     (use-package treemacs-all-the-icons :ensure)
   #+end_src

** Auth

   #+begin_src emacs-lisp
     ;; Integrate Emacs' auth-source with password-store
     ;; https://github.com/DamienCassou/auth-source-pass
     (use-package auth-source-pass
       :ensure
       :config
       (auth-source-pass-enable))

     ;; A major mode for password-store
     ;; https://github.com/NicolasPetton/pass
     (use-package pass :ensure)
   #+end_src

** Workspaces & Layouts
   :PROPERTIES:
   :ID:       b7339f82-aa91-4770-a62a-873aff27a6c5
   :END:

*** Burly

    Burly is a lightweight workspace manager that builds on top of Emacs' bookmark system.

    #+title: Example Burly Workflow
    | Keys                       | Description                                                  |
    |----------------------------+--------------------------------------------------------------|
    | M-x burly-bookmark-frames  | Bookmark the current frames and their window configurations. |
    | M-x burly-bookmark-windows | Bookmark the current frame’s window configuration.           |
    | M-x burly-open-bookmark    | Select and open a Burly bookmark                             |
    | M-x list-bookmarks         | Display a list of existing bookmarks                         |
    | C-x r l                    | list-bookmarks                                               |

    #+begin_src emacs-lisp
      ;; Burly is a lightweight workspace manager that builds on top of
      ;; Emacs' bookmark system.
      ;; https://github.com/alphapapa/burly.el
      (use-package burly
	:ensure
	:bind (("C-c b f" . burly-bookmark-frames)
	       ("C-c b w" . burly-bookmark-windows)
	       ("C-c b o" . burly-open-bookmark)))
    #+end_src

*** Focus Modes

    Modes for focus and eliminating distractions.

    #+begin_src emacs-lisp
      (use-package olivetti :ensure)
      (use-package writeroom-mode :ensure)
    #+end_src

** Terminal
   :PROPERTIES:
   :ID:       2ecbc734-8793-48c8-8a6e-4a1ef14f19d3
   :END:

   Use a terminal emulator from within Emacs.

   #+begin_src emacs-lisp
     ;; Emacs-libvterm (vterm) is fully-fledged terminal emulator inside
     ;; GNU Emacs based on libvterm, a C library. As a result of using
     ;; compiled code (instead of elisp), emacs-libvterm is fully capable,
     ;; fast, and it can seamlessly handle large outputs.
     ;;
     ;; https://github.com/akermu/emacs-libvterm
     (use-package vterm
       :ensure
       :custom
       (vterm-shell "bash"))

     ;; Toggles between the vterm buffer and whatever buffer you are editing.
     ;; https://github.com/jixiuf/vterm-toggle
     (use-package vterm-toggle :ensure)

     ;; Manage multiple vterm buffers.
     ;; https://github.com/suonlight/multi-vterm
     (use-package multi-vterm
       :ensure
       :config
       (global-set-key (kbd "C-;") 'multi-vterm-dedicated-toggle)
       (global-set-key (kbd "C-:") 'multi-vterm-project)
       (global-set-key (kbd "S-<left>") 'multi-vterm-prev)
       (global-set-key (kbd "S-<right>") 'multi-vterm-next))


     ;; Helps you to use shell easily on Emacs. Only one key action to work.
     (use-package shell-pop
       :ensure
       :init
       ;; Workaround for annoying shell-pop layout issue.
       ;; See https://github.com/kyagi/shell-pop-el/issues/51#issuecomment-297470855
       (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)

       :custom
       (shell-pop-universal-key "C-;" "Toggle a shell via shell-pop.")
       (shell-pop-shell-type
	(if (fboundp 'vterm)
	    '("vterm" "*vterm*" #'vterm)
	  '("eshell", "*eshell*", #'eshell))))
   #+end_src

** Org
   :PROPERTIES:
   :ID:       c2cb1498-f04a-4016-bc4e-31cefe1b9fc2
   :END:

   See [[https://orgmode.org][orgmode.org]].

   #+begin_src emacs-lisp
     (use-package org
       ;; Use org-plus-contrib to get contrib packages as well.
       ;; See:
       ;;   - org: https://code.orgmode.org/bzg/org-mode/src/master/contrib
       ;;   - nix: https://github.com/nix-community/emacs-overlay/blob/de64025616606b92d4e082c2953310b1ca52d93e/repos/org/org-generated.nix#L18
       :ensure org-plus-contrib
       :config
       ;; See https://orgmode.org/manual/Activation.html
       (global-set-key (kbd "C-c l") 'org-store-link)
       (global-set-key (kbd "C-c a") 'org-agenda)
       (global-set-key (kbd "C-c c") 'org-capture)

       ;; This is required, see here.
       (org-babel-do-load-languages
	'org-babel-load-languages
	'((awk . t)
	  (emacs-lisp . t)
	  (js . t)
	  (python . t)
	  (shell . t)
	  (plantuml . t)))

       :custom
       (org-plantuml-exec-mode 'plantuml)
       (org-plantuml-executable-path 'plantuml)
       (org-startup-with-inline-images t)
       (org-image-actual-width nil)
       (org-default-notes-file "notes.org")
       (org-directory "~/org")
       (org-agenda-files (list
			  org-directory
			  (concat org-directory "/roam")
			  (concat org-directory "/roam/daily")))
       (org-refile-targets '((org-agenda-files . (:maxlevel . 5))))
       (org-confirm-babel-evaluate nil "Don't ask for confirmation before executing code blocks")

       (org-capture-templates (doct '(("Todo"
				       :keys "t"
				       :file "todo.org"
				       :headline "Tasks"
				       :empty-lines-before 1
				       :todo-state "TODO"
				       :template ("* %{todo-state} %^{Description}"
						  ":PROPERTIES:"
						  ":Created: %U"
						  ":END:"
						  "%i"
						  "%a"))

				      ("Article"
				       :keys "a"
				       :file "todo.org"
				       :headline "Articles"
				       :empty-lines-before 1
				       :todo-state "TODO"
				       :template ("* %{todo-state} %a %^G"
						  ":PROPERTIES:"
						  ":CAPTURED: %U"
						  ":URL: %a"
						  ":DESCRIPTION: %^{DESCRIPTION}p"
						  ":END:"
						  ""
						  "%i"))

				      ("Emacs Package"
				       :keys "e"
				       :file "todo.org"
				       :headline "Emacs Packages to Review"
				       :empty-lines-before 1
				       :todo-state "TODO"
				       :template ("* %{todo-state} %^{Emacs Packaage Name} %^G"
						  ":PROPERTIES:"
						  ":CAPTURED: %U"
						  ":URL: %^{URL}p"
						  ":DESCRIPTION: %^{DESCRIPTION}p"
						  ":END:"
						  ""
						  "%i"
						  "%a"))))))

     (use-package doct
       :ensure
       :commands (doct))

     (use-package ob-go)

     ;; Use unicode bullet characters in org-mode.
     ;; To customize, see https://github.com/integral-dw/org-superstar-mode/blob/master/DEMO.org
     (use-package org-superstar
       :ensure
       :init
       (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
       :custom
       ;; Set different bullets, with one getting a terminal fallback.
       (org-superstar-headline-bullets-list '("☰"
					      "◉"
					      "○"
					      "▶"
					      "▷")))

     (use-package org-sidebar
       :ensure
       :after (general)
       :config
       (leader-def :infix "o"
		   "b" 'org-sidebar-backlinks))
   #+end_src

*** Zettelkasten
    :PROPERTIES:
    :ID:       892f130d-0e3c-44a2-97c6-51851b2081d2
    :END:

    #+begin_src emacs-lisp
      (use-package org-roam
	:ensure
	:hook
	(after-init . org-roam-mode)
	:after org
	:custom
	(org-roam-directory (concat org-directory "/roam"))
	(make-directory org-roam-directory t)
	(org-roam-graph-exclude-matcher '("daily"))
	:bind (:map org-roam-mode-map
		    (("C-c n d" . org-roam-dailies-find-today)

		     ;; FIXME: conflicts with org-projectile
		     ;; ("C-c n p" . org-roam-dailies-find-previous-note)
		     ;; ("C-c n n" . org-roam-dailies-find-next-note)

		     ("C-c n l" . org-roam)
		     ("C-c n f" . org-roam-find-file)
		     ("C-c n g" . org-roam-graph))
		    :map org-mode-map
		    (("C-c n i" . org-roam-insert))
		    (("C-c n I" . org-roam-insert-immediate))))
    #+end_src

*** Slides

    #+name: org-mode slides
    #+begin_src emacs-lisp
      ;; A presentation tool for org-mode based on the visibility of outline trees
      (use-package org-tree-slide :ensure)

      ;; Good-lookinig Emacs presentations based on org files.
      (use-package zpresent :ensure)

      ;; Ultra-minimalist presentation minor-mode for Emacs org-mode.
      (use-package org-present
	:ensure
	:init
	(add-hook 'org-present-mode-hook
		  (lambda ()
		    (org-present-big)
		    (org-present-hide-cursor)
		    (org-present-read-only)))

	(add-hook 'org-present-mode-quit-hook
		  (lambda ()
		    (org-present-small)
		    (org-present-show-cursor)
		    (org-present-read-write))))
    #+end_src

*** Contacts

    #+begin_src emacs-lisp
      ;; Org-mode contact lists.
      ;; See reddit: https://www.reddit.com/r/emacs/comments/8toivy/tip_how_to_manage_your_contacts_with_orgcontacts/
      (use-package org-contacts
	:after (org doct)
	:custom
	(org-contacts-files '("contacts.org"))
	:config
	(add-to-list 'org-capture-templates
		     (doct '(("Contact"
			      :keys "c"
			      :file "contacts.org"
			      :headline "Contacts"
			      :empty-lines-before 1
			      :template ("* %^{Name}"
					 ":PROPERTIES:"
					 ":EMAIL: %^{Email}"
					 ":PHONE:"
					 ":ALIAS:"
					 ":NICKNAME:"
					 ":IGNORE:"
					 ":ICON:"
					 ":NOTE: %^{NOTE}"
					 ":ADDRESS:"
					 ":BIRTHDAY: %^{yyyy-mm-dd}"
					 ":END:"))))))
    #+end_src

*** Calendar & Diary

    #+begin_src elisp
      (use-package calendar
	:custom
	(calendar-date-style "iso" "Use year/month/day format"))
    #+end_src

** Programming                                                  :programming:
*** General

    #+begin_src emacs-lisp
      ;; Define commands which run reformatters on the current Emacs buffer
      ;; https://github.com/purcell/reformatter.el
      (use-package reformatter
	:ensure
	:commands reformatter-define)
    #+end_src

*** Structured Data

    #+begin_src emacs-lisp
      (use-package json-mode :ensure)
      (use-package yaml-mode :ensure)
    #+end_src

*** Git
    :PROPERTIES:
    :ID:       ce89f275-2463-4ca5-9d27-9325942bbcda
    :END:
    #+begin_src emacs-lisp
      (use-package magit
	:ensure
	:config
	;; Taken from https://idiomdrottning.org/magit-transients
	(defun magit-display-buffer-same-window (buffer)
	  "Display BUFFER in the selected window like God intended."
	  (display-buffer
	   buffer '(display-buffer-same-window)))

	(setq magit-display-buffer-function 'magit-display-buffer-same-window)
	(setq magit-popup-display-buffer-action '((display-buffer-same-window))))

      ;; Work with Git forges from the comfort of Magit.
      ;; https://github.com/magit/forge
      (use-package forge
	:ensure
	:after magit)

      (use-package git-gutter
	:ensure
	:custom
	(global-git-gutter-mode t)
	:bind
	(("C-x C-g" . git-gutter)
	 ("C-x v =" . git-gutter:popup-hunk)
	 ("C-x v p" . git-gutter:previous-hunk)
	 ("C-x v n" . git-gutter:next-hunk)
	 ("C-x v s" . git-gutter:stage-hunk)
	 ("C-x v r" . git-gutter:revert-hunk)
	 ("C-x v SPC" . git-gutter:mark-hunk)))

      (use-package gitignore-mode :ensure)
    #+end_src

*** LSP                                                                 :lsp:
    :PROPERTIES:
    :ID:       fc767019-9579-4f0a-bfd5-df7bd656062a
    :END:

    [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol (LSP)]].

    #+begin_src emacs-lisp
      (use-package lsp-mode
	:ensure
	:commands (lsp lsp-deferred)
	:hook (go-mode . lsp-deferred))

      (use-package lsp-ui
	:ensure
	:commands lsp-ui-mode
	:init
	(setq lsp-ui-doc-enable t
	      lsp-ui-peek-enable t
	      lsp-ui-sideline-enable t
	      lsp-ui-imenu-enable t
	      lsp-ui-flycheck-enable t))
    #+end_src
*** Snippets
    :PROPERTIES:
    :ID:       9edb71fc-4d13-442e-b7d2-7264a7fcdb5b
    :END:

    Snippets via YASnippet.

    See http://joaotavora.github.io/yasnippet/index.html

    #+begin_src emacs-lisp
      (use-package yasnippet
	:ensure
	:init
	(yas-global-mode 1)
	:custom
	(yas-snippet-dirs '("~/.config/nixpkgs/files/emacs/snippets")))
    #+end_src

*** Emacs Lisp                                                         :lisp:
    :PROPERTIES:
    :ID:       f4aaceb8-ddb4-49cd-aa63-32ce743d1b23
    :END:

    #+begin_src emacs-lisp
      ;; Slime-style navigation of Emacs Lisp source with M-. & M-,
      ;; https://github.com/purcell/elisp-slime-nav
      (use-package elisp-slime-nav
	:ensure
	:hook ((emacs-lisp-mode ielm-mode org-mode) . elisp-slime-nav-mode))
    #+end_src

*** Go                                                                   :go:
    :PROPERTIES:
    :ID:       92ca2abc-410e-4ffb-b86d-c2e1d427ab78
    :END:

    Go programming.

    See:
    - https://arenzana.org/2019/12/emacs-go-mode-revisited/
    - https://github.com/golang/tools/blob/master/gopls/doc/emacs.md

    #+begin_src emacs-lisp
      (use-package go-mode
	:ensure
	:defer t
	:after lsp
	:hook ((before-save-hook . lsp-format-buffer)
	       (before-save-hook . lsp-organize-imports))

	:init
	(display-line-numbers-mode 1)

	:bind (("M-," . compile)
	       ("M-." . godef-jump))

	:custom
	(compile-command "echo Building... && go build -v && echo Testing... && go test -v && echo Linting... && golangci-lint")
	(compilation-read-command nil))
    #+end_src

*** Nix                                                                 :nix:
    :PROPERTIES:
    :ID:       d5c7d0da-5d1e-4663-a85c-d63ae1085f3c
    :ORDERED:  t
    :END:
    #+begin_src emacs-lisp
      ;; An Emacs major mode for editing Nix expressions.
      ;; https://github.com/NixOS/nix-mode
      (use-package nix-mode
	:ensure
	:hook fmt-nix-on-save-mode
	:config
	(reformatter-define fmt-nix :program "nixpkgs-fmt"))
	;;(reformatter-define fmt-nix-linter :program "nix-linter"))
    #+end_src

*** CUE                                                                 :cue:

    Using [[https://github.com/jdbaldry/cue-mode][cue-mode]].

    #+begin_src emacs-lisp
      (use-package cue-mode
	:hook fmt-cue-on-save-mode
	:mode "\\.cue\\'"
	:config
	(reformatter-define fmt-cue :program "cue" :args '("fmt" "-s" "-")))
    #+end_src

*** Python                                                           :python:

    #+name: python mode
    #+begin_src emacs-lisp
      (use-package python
	:hook ((fmt-black-on-save-mode fmt-isort-on-save-mode) . python-mode)
	:init
	(reformatter-define fmt-black :program "black" :args '("-"))
	(reformatter-define fmt-isort :program "isort" :args '("-" "-d")))

       (use-package jinja2-mode :ensure)
    #+end_src

**** References

     - https://realpython.com/emacs-the-best-python-editor/
     - https://elpy.readthedocs.io/en/latest/index.html

*** Javascript / TypeScript                                :javascript:empty:
*** Ruby                                                         :ruby:empty:
*** Visualizations

    Data visualizations.

    #+name: Data Visualizations
    #+begin_src emacs-lisp
      (use-package mermaid-mode :ensure)
      (use-package ob-mermaid :ensure)
      (use-package plantuml-mode
	:ensure
	:init
	;; Sample executable configuration
	(setq plantuml-executable-path "plantuml") ;; In-path with env-emacs (nix).
	(setq plantuml-default-exec-mode "executable")

	;; Enable plantuml-mode for PlantUML files
	(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
	(add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode)))

      (use-package vega-view :ensure)
    #+end_src


** DevOps                                                            :devops:
*** Docker
    :PROPERTIES:
    :ID:       a97efd6c-7851-49cd-97c3-21b2ec9a1dea
    :END:

    #+begin_src emacs-lisp
      (use-package docker
	:ensure
	:bind ("C-c d" . docker))

      (use-package dockerfile-mode :ensure)
    #+end_src

*** Kubernetes
    :PROPERTIES:
    :ID:       83ad06d1-a157-4a88-9a57-fce519e3ca1e
    :END:

    Packages for interacting with Kubernetes.

    #+begin_src emacs-lisp
      ;; See https://github.com/chrisbarrett/kubernetes-el
      (use-package kubernetes
	:ensure t
	:commands (kubernetes-overview))

      ;; See https://github.com/abrochard/kubel
      (use-package kubel :ensure)
    #+end_src

*** Ansible
    :PROPERTIES:
    :ID:       d928baaf-7e3e-4cf0-b451-148db231adc1
    :END:

    #+begin_src emacs-lisp
      (use-package ansible
	:ensure
	:init
	(add-hook 'yaml-mode-hook '(lambda () (ansible 1))))
    #+end_src

** Completion
   :PROPERTIES:
   :ID:       252fae67-6a95-447f-b529-054208c091f6
   :END:

   Completion mode settings.

   See:
   - [[https://www.youtube.com/watch?v=IDkx48JwDco][Emacs: fuzzy find files (fzf, ripgrep, Ivy+Counsel)]]
   - [[https://www.youtube.com/watch?v=43Dg5zYPHTU][Emacs: completion framework (Embark,Consult,Orderless,etc.)]]

   #+BEGIN_SRC emacs-lisp
     ;; Better solution for incremental narrowing in Emacs.
     (use-package selectrum
       :ensure
       :init
       (selectrum-mode +1))

     ;; Simple but effective sorting and filtering for Emacs.
     (use-package prescient
       :ensure
       :commands prescient-persist-mode
       :init
       ;; Save command history on disk, so that sorting gets more intelligent over time.
       (prescient-persist-mode 1)
       :custom
       (prescient-filter-method '(literal regexp initialism fuzzy)))

     ;; Use prescient sorting with Company.
     (use-package company-prescient :ensure)

     ;; Use prescient sorting with Selectrum.
     (use-package selectrum-prescient
       :ensure
       :init
       ;; Make sorting and filtering more intelligent.
       (selectrum-prescient-mode +1))

     ;; An Emacs mode for quickly browsing, filtering, and editing
     ;; directories of plain text notes.
     (use-package deft
       :ensure
       :bind ("<f12>" . deft)
       :commands (deft)
       :config
       (setq deft-directory org-directory)
       (setq deft-recursive t)
       (setq deft-extensions '("org" "md")))

     ;; Company mode is a standard completion package.
     (use-package company
       :ensure
       :hook (after-init . global-company-mode))
   #+END_SRC
** Media
*** Web

    #+name: 
    #+begin_src emacs-lisp
      ;; Extend shr/eww and other modes with org features and analytics capabilities. Also enables archiving web pages to org files with shr.
      ;; https://github.com/chenyanming/shrface
      ;; FIXME: Using custom version via nix. Once MELPA is updated (post 2.6.3?), revert back to MELPA version?
      (use-package shrface
	:config
	(shrface-basic)
	(shrface-trial)
	(shrface-default-keybindings) ; setup default keybindings
	(setq shrface-href-versatile t)

	;; Convenience functions for archiving URLs as org files.
	;; See also these functions that are part of shrface:
	;;   - shrface-html-export-as-org
	;;   - shrface-html-export-to-org
	;; See https://github.com/chenyanming/shrface/blob/e3434259269e37cee6ff6c7e2300d7fd4c1df8d9/README.org#export-html-to-org
	(defun request-url-as-org (url)
	  (interactive "sRequest url: ")
	  (require 'shrface)
	  (let ((name "request-url")
		(buf "*request-url*")
		(cmd (format "curl -L %s" url)))
	    (if (get-buffer buf)
		(kill-buffer buf))
	    (set-process-sentinel
	     (start-process-shell-command name buf cmd)
	     (lambda (p e)
	       (when (= 0 (process-exit-status p))
		 (with-current-buffer buf
		   (shrface-html-export-as-org (buffer-string))))))))

	(defun request-url-to-org (url)
	  (interactive "sRequest url: ")
	  (require 'shrface)
	  (let ((name "request-url")
		(buf "*request-url*")
		(cmd (format "curl -L %s" url)))
	    (if (get-buffer buf)
		(kill-buffer buf))
	    (set-process-sentinel
	     (start-process-shell-command name buf cmd)
	     (lambda (p e)
	       (when (= 0 (process-exit-status p))
		 (with-current-buffer buf
		   (shrface-html-export-to-org (buffer-string) "request.org"))))))))

      ;; Use shrface-mode with eww to browse/archive web pages as org files.
      (use-package eww
	:after shrface
	:init
	(add-hook 'eww-after-render-hook #'shrface-mode)
	:config
	(define-key eww-mode-map (kbd "<tab>") 'shrface-outline-cycle)
	(define-key eww-mode-map (kbd "S-<tab>") 'shrface-outline-cycle-buffer)
	(define-key eww-mode-map (kbd "C-t") 'shrface-toggle-bullets)
	(define-key eww-mode-map (kbd "C-j") 'shrface-next-headline)
	(define-key eww-mode-map (kbd "C-k") 'shrface-previous-headline)
	(define-key eww-mode-map (kbd "M-l") 'shrface-links-counsel) ; or 'shrface-links-helm
	(define-key eww-mode-map (kbd "M-h") 'shrface-headline-counsel)) ; or 'shrface-headline-helm)
    #+end_src
    
*** RSS/Atom Feeds
    :PROPERTIES:
    :ID:       52508cea-200d-41bd-8759-62ca74da1fd0
    :END:

    #+begin_src emacs-lisp
      ;; An Emacs web feeds client
      ;; https://github.com/skeeto/elfeed
      (use-package elfeed :ensure)

      ;; Configure the Elfeed RSS reader with an Orgmode file
      ;; https://github.com/remyhonig/elfeed-org
      (use-package elfeed-org
	:ensure
	:config
	(elfeed-org)

	:custom
	(rmh-elfeed-org-files (list "~/.config/emacs/elfeed.org")))

      ;; A frontend for elfeed.
      ;; https://github.com/Manoj321/elfeed-dashboard
      (use-package elfeed-dashboard
	:config
	(setq elfeed-dashboard-file "~/.config/emacs/lisp/elfeed-dashboard/elfeed-dashboard.org")
	;; to update feed counts automatically
	(advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))
    #+end_src

*** Audio & Video
    :PROPERTIES:
    :ID:       0e06b145-e172-4005-bef6-1bc3ea2de60f
    :END:

    Use bongo and/or EMMS to play audio and video.

    #+begin_src emacs-lisp
      (use-package bongo
	:ensure
	:custom
	(bongo-custom-backend-matchers
	 `((mpv local-file "opus"))
	 "It seems bongo doesn't play opus files by default. Let's fix that!"))

      ;; The Emacs Multi-Media System.
      ;; See https://www.gnu.org/software/emms/
      (use-package emms
	:ensure

	:bind (("C-c e p" . emms-pause)
	       ("C-c e f" . emms-next)
	       ("C-c e b" . emms-previous)
	       ("C-c e s" . emms-stop)
	       ("C-c e >" . (lambda () (interactive) (emms-seek 30)))
	       ("C-c e <" . (lambda () (interactive) (emms-seek -30)))
	       :map dired-mode-map
	       ("C-c e SPC" . emms-play-dired))

	:config
	(require 'emms-mark)
	(require 'emms-setup)
	(require 'emms-streams)

	(emms-all)
	(emms-default-players)

	(setq emms-playlist-default-major-mode 'emms-mark-mode)
	(setq emms-source-file-default-directory "~/Music/"))

      ;; TODO: Re-enable later?
      ;;(setq emms-player-list '(emms-player-mpv))

      ;; (emms-player-set 'emms-player-simple-ipc-mpv 'regex
      ;; 		   (emms-player-simple-regexp
      ;; 		    "ogg" "opus" "mp3" "wav" "mpg" "mpeg" "wmv" "wma"
      ;; 		    "mov" "avi" "divx" "ogm" "ogv" "asf" "mkv" "rm" "rmvb"
      ;; 		    "mp4" "flac" "vob" "m4a" "ape" "flv" "webm" "aif")))
    #+end_src

*** PDFs

    #+begin_src emacs-lisp
      (use-package pdf-tools :ensure)
    #+end_src

** Bindings
   :PROPERTIES:
   :ID:       7ee3cd8e-26ad-4d13-983e-11d11a80edb5
   :END:

*** Keyboard

    Configuration relating mainly to key binding.

    See `M-x describe-personal-keybindings`.

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
      (setq compilation-scroll-output t)

      (use-package dumb-jump
	:ensure
	:bind (("M-g o" . dumb-jump-go-other-window)
	       ("M-g j" . dumb-jump-go)
	       ("M-g b" . dumb-jump-back)
	       ("M-g i" . dumb-jump-go-prompt)
	       ("M-g x" . dumb-jump-go-prefer-external)
	       ("M-g z" . dumb-jump-go-prefer-external-other-window))
	:custom
	(dumb-jump-selector 'completing-read "completing-read is for use with selectrum"))

      (defhydra dumb-jump-hydra (:color blue :columns 3)
	"Dumb Jump"
	("j" dumb-jump-go "Go")
	("o" dumb-jump-go-other-window "Other window")
	("e" dumb-jump-go-prefer-external "Go external")
	("x" dumb-jump-go-prefer-external-other-window "Go external other window")
	("i" dumb-jump-go-prompt "Prompt")
	("l" dumb-jump-quick-look "Quick look")
	("b" dumb-jump-back "Back"))

      ;; Emacs package that displays available keybindings in popup.
      ;; https://github.com/justbur/emacs-which-key
      (use-package which-key
	:ensure
	:config
	(which-key-mode))

      ;; NOTES:
      ;;   - Not in (M)ELPA yet, do not :ensure.
      ;;   - Watching for a first non-pre-release on GH, see https://github.com/countvajhula/rigpa/issues/1#issuecomment-743849934
      ;; (use-package rigpa
      ;;   :config
      ;;   (setq rigpa-mode t))

      ;;   ;; navigating meta modes
      ;;   (global-set-key (kbd "s-m s-m") 'rigpa-flashback-to-last-tower)
      ;;   (global-set-key (kbd "C-<escape>") 'my-enter-tower-mode)
      ;;   (global-set-key (kbd "M-<escape>") 'my-enter-mode-mode)
      ;;   (global-set-key (kbd "s-<escape>") 'my-enter-mode-mode)
      ;;   (global-set-key (kbd "M-<return>")
      ;; 		  (lambda ()
      ;; 		    (interactive)
      ;; 		    (rigpa-enter-selected-level)
      ;; 		    (let ((ground (rigpa--get-ground-buffer)))
      ;; 		      (my-exit-mode-mode)
      ;; 		      (switch-to-buffer ground))))
      ;;   (global-set-key (kbd "s-<return>")
      ;; 		  (lambda ()
      ;; 		    (interactive)
      ;; 		    (rigpa-enter-selected-level)
      ;; 		    (let ((ground (rigpa--get-ground-buffer)))
      ;; 		      (my-exit-mode-mode)
      ;; 		      (switch-to-buffer ground))))
      ;;   (global-set-key (kbd "C-<return>")
      ;; 		  (lambda ()
      ;; 		    (interactive)
      ;; 		    (my-exit-tower-mode)
      ;; 		    (my-enter-mode-mode))))
      ;;
      ;; ;; indexed entry to various modes
      ;; (global-set-key (kbd "s-n") 'evil-normal-state)
      ;; (global-set-key (kbd "s-y")        ; symex mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "symex")))
      ;; (global-set-key (kbd "s-;") (kbd "s-y"))
      ;; (global-set-key (kbd "s-w")        ; window mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "window")))
      ;; (global-set-key (kbd "s-v")        ; view mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "view")))
      ;; (global-set-key (kbd "s-x")        ; char mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "char")))
      ;; (global-set-key (kbd "s-a")        ; activity mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "activity")))
      ;; (global-set-key (kbd "s-z")        ; text mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "text")))
      ;; (global-set-key (kbd "s-g")        ; history mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "history")))
      ;; (global-set-key (kbd "s-i")        ; system mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "system")))
      ;; (global-set-key (kbd "s-b")        ; buffer mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "buffer")))
      ;; (global-set-key (kbd "s-f")        ; file mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "file")))
      ;; (global-set-key (kbd "s-t")        ; tab mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "tab")))
      ;; (global-set-key (kbd "s-l")        ; line mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "line")))
      ;; (global-set-key (kbd "s-e")        ; application mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "application")))
      ;; (global-set-key (kbd "s-r")        ; word mode
      ;;                 (lambda ()
      ;;                   (interactive)
      ;;                   (rigpa-enter-mode "word"))))
    #+end_src
  
*** Mouse

    #+begin_src emacs-lisp
      ;; Built-in package that handles binding arbitrary actions to mouse strokes.
      (use-package strokes
	:init
	(strokes-mode)
	(setq strokes-use-strokes-buffer t)) ; Draw strokes to the screen
    #+end_src

** Creativity and Inspiration
   
   #+begin_src emacs-lisp
     ;; FIXME: package not found via melpa?
     ;; The I Ching, or Book of Changes
     ;; https://github.com/zzkt/i-ching
     ;; (use-package i-ching
     ;;   :ensure
     ;;   :config (setq i-ching-hexagram-size 18
     ;; 		i-ching-hexagram-font "DejaVu Sans"
     ;; 		i-ching-divination-method '3-coins
     ;; 		i-ching-randomness-source 'pseudo)
     ;;   :bind (("H-i h" . i-ching-insert-hexagram)))
   #+end_src
   
** Thin Ice!
   :PROPERTIES:
   :ID:       cc78bcc7-efbc-4243-a937-1de64fb84fa4
   :END:

   This is an area for things I suspect I don't need, but am not
   completely sure about deleting yet. On thin ice!

   #+BEGIN_SRC emacs-lisp
     (setq compilation-window-height 14)

     (defun my-compilation-hook ()
       (when (not (get-buffer-window "*compilation*"))
	 (save-selected-window
	   (save-excursion
	     (let* ((w (split-window-vertically))
		    (h (window-height w)))
	       (select-window w)
	       (switch-to-buffer "*compilation*")
	       (shrink-window (- h compilation-window-height)))))))

     (add-hook 'compilation-mode-hook 'my-compilation-hook)
   #+END_SRC
