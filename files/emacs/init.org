#+TITLE: Literate Emacs configuration using org-mode
#+SUBTITLE: A Emacs Lisp journey
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el
#+TODO: TODO(t) BLOCKED(b) | DONE(d) CANCELLED(c)

* Overview

  Literate Emacs configuration using org-mode.

  See https://orgmode.org/worg/org-contrib/babel/intro.html#emacs-initialization

** Goals [1/6]

   What do I want from Emacs?
   
*** TODO Provide ultimate Developer Experience (DX) [5/10]
    - [X] Git (magit)
    - [X] Reproducible editor package (via Nix)
    - [X] Snippets (yasnippets)
    - [X] Fuzzy-find (rg/fzf integration, prot window)
    - [X] Completion
    - [ ] Go (format, compile, test, jump-to-definition, debug)
    - [ ] Nix (format)
    - [ ] CUE (format, highlight)
    - [ ] NodeJS
    - [ ] Python
*** DONE Provide excellent DevOps experience [2/2]
    - [X] Docker (docker)
    - [X] Kubernetes (kubernetes-overview, kubel)
*** TODO Provide integrated daily drivers [4/10]
    - [X] web (eww BUT sometimes hangs? Performance mediocre)
    - [X] music (bongo w/ mpv backend)
    - [-] videos (bongo w/ mpv backend)
      - [X] local videos
      - [ ] youtube etc.
    - [X] RSS (elfeed)
      - [ ] Central elfeed file on server?
    - [X] shell (eshell + vterm)
    - [ ] Slack
    - [ ] email
    - [ ] image viewer
    - [ ] slides
    - [ ] making art (drawing, music, writing/blogging, etc)
*** TODO Provide stunning looks [1/3]
    - [X] Look into prot's bullet points, fonts, etc
    - [ ] multi-font theme(s)
    - [ ] awesome colorscheme
*** TODO Provide ultimate hackability [0/5]
    - [ ] Write 10 custom functions
    - [ ] Write a custom minor mode
    - [ ] Write a custom major mode
    - [ ] Add language support for an unsupported language (e.g. CUE)
    - [ ] Create a custom theme (e.g. via `M-x customize-create-theme`)
*** TODO Provide OrgMode ExoBrain [0/6]

    See [[https://github.com/JSmurf/awesome-org][awesome-org]].
    
    - [ ] Todo lists
      - [ ] Personal
      - [ ] Work
    - [ ] Agenda
    - [ ] Sync (via Syncthing etc)
    - [ ] Capture
    - [ ] Journal
    - [ ] Evaluate related packages

    |-------------+----------------------------------------------------+--------|
    | PACKAGE     | DESCRIPTION                                        | RATING |
    |-------------+----------------------------------------------------+--------|
    | [[https://github.com/bastibe/org-journal][org-journal]] | A simple org-based journalling mode.               |        |
    | [[https://www.orgroam.com/][org-roam]]    | A plain-text personal knowledge management system. |        |
    | [[https://github.com/alphapapa/org-sidebar][org-sidebar]] | Helpful sidebars for Org buffers.                  |        |
    | [[https://github.com/landakram/org-z][org-z]]       | Lightweight, Org-mode flavored zettelkasten links. |        |

** Comparison with alternatives

   I used VIM as my primary text editor for ~15 years (although I also
   dabbled in Emacs and Plan9's ACME during that period). I then
   switched to Emacs full-time in 2020. This table describes some of
   the reasons why.

   #+NAME: Emacs vs. Alternatives
   | Feature  | Emacs        | VIM              | Acme                                | VSCode     |
   |----------+--------------+------------------+-------------------------------------+------------|
   | language | Emacs Lisp   | VimScript        | any                                 | JavaScript |
   | scope    | kitchen sink | text-editor plus | integrating development environment | minimal    |

** Emacs Startup

   The Emacs startup process is described in detail [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][here]].

** References
*** Learning

    Useful Emacs learning resources.

    - [[https://github.com/jtmoulia/elisp-koans][Elisp Koans]]
    - [[https://github.com/chrisdone/elisp-guide][Elisp Guide]]
    - [[https://www.youtube.com/watch?v=RiXK7NALgRs&list=PL8Bwba5vnQK14z96Gil86pLMDO2GnOhQ6][Emacs Videos by Protesilaos Stavrou]]
    - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
    - [[https://github.com/p3r7/awesome-elisp][Awesome Elisp]]
    - [[http://caiorss.github.io/Emacs-Elisp-Programming/][Emacs in a Box]]

*** Emacs Init Files

    Some other org-mode init files.

    - https://github.com/EgorDuplensky/emacs-init-org/blob/master/my-init.org
    - https://github.com/dariushazimi/emacsdotfiles/blob/master/myinit-linux.org
    - https://github.com/globz/emacs-conf/blob/master/init.org
    - https://raw.githubusercontent.com/AlexStragies/EmacsConfig/master/emacs.org
    - https://raw.githubusercontent.com/EgorDuplensky/emacs-init-org/master/my-init.org
    - https://raw.githubusercontent.com/gitten/.emacs.d/master/config.org
    - https://raw.githubusercontent.com/vhallac/literate.emacs.d/master/Startup.org
    - https://protesilaos.com/dotemacs/
    - https://gitlab.com/protesilaos/dotfiles/-/raw/master/emacs/.emacs.d/emacs-init.org
    - https://justin.abrah.ms/dotfiles/emacs.html
* Configuration
** Customize

   Settings having to do with emacs' customize facility (see 'M-x customize').

   Consider one day moving away from using customize altogether.
   See for example: https://tech.toryanderson.com/2020/11/13/migrating-to-a-custom-file-less-setup/

   #+begin_src emacs-lisp
     ;; Use a *separate* file for customizations.
     ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html#Saving-Customizations
     (setq custom-file "~/.config/emacs/custom.el")

     ;; Load custom theme(s) from here. Currently using solo-jazz.el.
     (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

     (load custom-file)
   #+end_src
** Non-Customize
   #+begin_src emacs-lisp
     (use-package emacs
       :init
       (tool-bar-mode -1)
       (scroll-bar-mode -1)
       (setq	echo-keystrokes 0.1          ; Show keystrokes ASAP
	     inhibit-startup-message t
	     initial-scratch-message nil
	     auto-fill-mode t
	     browse-url-browser-function 'eww-browse-url   ; Browse with eww by default
	     backup-directory-alist '(("." . "~/.config/emacs/backup")))

       ;; Proof-of-concept: Open a buffer in a specific mode on emacs initialization.
       ;; TODO: Delete lines below once concept has been applied in hooks.
       (with-current-buffer (get-buffer-create "foobar-finkelstein")
	 (org-mode)))
   #+end_src
   
** Emacs Package Repos
   #+begin_src emacs-lisp
     ;; Enable MELPA repo.
     ;; See https://github.com/melpa/melpa#usage
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
   #+end_src

** Misc

   Miscellaneous packages

   #+begin_src emacs-lisp
     (use-package bug-hunter :ensure)
     (use-package discover-my-major :ensure)
     (use-package hydra :ensure)
     (use-package jinja2-mode :ensure)
     (use-package json-mode :ensure)
     (use-package olivetti :ensure)
     (use-package page-break-lines :ensure)
     (use-package pdf-tools :ensure)
     (use-package paradox :ensure)
     (use-package systemd :ensure)
     (use-package undo-tree :ensure)
     (use-package yaml-mode :ensure)
     (use-package elpher :ensure)
     (use-package vterm :ensure)

     (use-package rainbow-delimiters
       :ensure
       :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

     (use-package dired-subtree
       :ensure
       :config
       (bind-keys :map dired-mode-map
		  ("i" . dired-subtree-insert)
		  (";" . dired-subtree-remove)))

     ;; Projects based on version control repo presence (e.g. git). Excellent!
     (use-package projectile
       :ensure
       :config
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))

     (use-package expand-region
       :ensure
       :config
       (global-set-key (kbd "C-=") 'er/expand-region))
   #+end_src

** Look & Feel

   Emacs Themes.

   See:
   - [[https://emacsthemes.com/][emacsthemes.com]]
   - [[https://peach-melpa.org/][peach-melpa.org]]

   #+begin_src emacs-lisp
     ;; Various theme and theme-related packages.
     (use-package all-the-icons :ensure)
     (use-package doom-modeline
       :ensure
       :init (doom-modeline-mode 1))
     (use-package doom-themes :ensure)
     (use-package laguna-theme :ensure)
     (use-package almost-mono-themes :ensure)
     (use-package monotropic-theme :ensure)

     ;; Apparently the modus- themes have been accepted into upstream
     ;; emacs, so remove them here once released versions begin to include
     ;; them.
     (use-package modus-operandi-theme :ensure)
     (use-package modus-vivendi-theme :ensure)

     ;; Theme-switching for Emacs based on daytime.
     ;; See https://github.com/guidoschmidt/circadian.el
     (use-package circadian
       :ensure
       :config
       (setq circadian-themes '(("8:00" . solo-jazz)
				("19:00" . laguna)))
       (circadian-setup))

     (defadvice load-theme (before theme-dont-propagate activate)
       "Advise load-theme to disable all custom themes before loading (enabling) another one.

	       See this StackOverflow answer: https://emacs.stackexchange.com/a/3114"
       (mapc #'disable-theme custom-enabled-themes))
   #+end_src

** Org-Mode

   See [[orgmode.org][orgmode.org]].

   #+begin_src emacs-lisp
     ;; NOTE: No need for :ensure, use version included with Emacs.
     (use-package org
       :config
       ;; See https://orgmode.org/manual/Activation.html
       (global-set-key (kbd "C-c l") 'org-store-link)
       (global-set-key (kbd "C-c a") 'org-agenda)
       (global-set-key (kbd "C-c c") 'org-capture))

     ;; Use unicode bullet characters in org-mode.
     ;; To customize, see https://github.com/integral-dw/org-superstar-mode/blob/master/DEMO.org
     (use-package org-superstar
       :ensure
       :init
       (add-hook 'org-mode-hook (lambda () (progn
					     (org-superstar-mode 1)
					     ;; Set different bullets, with one getting a terminal fallback.
					     (setq org-superstar-headline-bullets-list
						   '("◉" "○" "🞛" "▷"))))))
   #+end_src

** Programming
*** Git
    #+begin_src emacs-lisp
      (use-package magit :ensure)
      (use-package gitignore-mode :ensure)
    #+end_src
*** LSP                                                                 :lsp:

    [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol (LSP)]].

    #+begin_src emacs-lisp
      (use-package lsp-mode
	:ensure
	:commands (lsp lsp-deferred)
	:hook (go-mode . lsp-deferred))

      (use-package lsp-ui
	:ensure
	:commands lsp-ui-mode
	:init
	(setq lsp-ui-doc-enable t
	      lsp-ui-peek-enable t
	      lsp-ui-sideline-enable t
	      lsp-ui-imenu-enable t
	      lsp-ui-flycheck-enable t))
    #+end_src
*** Snippets

    Snippets via YASnippet.

    See http://joaotavora.github.io/yasnippet/index.html
    
    #+begin_src emacs-lisp
      (use-package yasnippet
	:ensure
	:commands yas-minor-mode
	:hook (go-mode . yas-minor-mode))
    #+end_src

*** Go                                                                   :go:

    Go programming.

    See: https://arenzana.org/2019/12/emacs-go-mode-revisited/
   
    #+begin_src emacs-lisp
      (use-package go-mode
	:ensure
	:defer t
	:after lsp
	:mode ("\\.go\\'" . go-mode)

	:init
	(setq compile-command "echo Building... && go build -v && echo Testing... && go test -v && echo Linting... && golangci-lint")
	(setq compilation-read-command nil)
	(display-line-numbers-mode 1) ; FIXME: Only want this to apply for
					      ; Go files, but as configured, applies
					      ; to all files!
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t)

	:bind (("M-," . compile)
	       ("M-." . godef-jump)))
    #+end_src

*** Nix                                                                 :nix:
    #+begin_src emacs-lisp
      (use-package nix-mode :ensure)
    #+end_src
*** CUE                                                           :cue:empty:
*** Python                                                     :python:empty:
*** Javascript / TypeScript                                :javascript:empty:
*** Ruby                                                         :ruby:empty:
** DevOps
*** Docker

    #+begin_src emacs-lisp
      (use-package docker
	:ensure t
	:bind ("C-c d" . docker))

      (use-package dockerfile-mode :ensure)
    #+end_src

*** Kubernetes

    Packages for interacting with Kubernetes.
    
    #+begin_src emacs-lisp
      ;; See https://github.com/chrisbarrett/kubernetes-el
      (use-package kubernetes
	:ensure t
	:commands (kubernetes-overview))

      ;; See https://github.com/abrochard/kubel
      (use-package kubel :ensure)
    #+end_src

*** Ansible
    
    #+begin_src emacs-lisp
      (use-package ansible
	:ensure
	:init
	(add-hook 'yaml-mode-hook '(lambda () (ansible 1))))
    #+end_src

** Completion

   Completion mode settings.

   See:
   - [[https://www.youtube.com/watch?v=QcPenVmmQyM][Ivy tips and tricks]]
   - [[https://www.youtube.com/watch?v=IDkx48JwDco][Emacs: fuzzy find files (fzf, ripgrep, Ivy+Counsel)]]

   #+BEGIN_SRC emacs-lisp
     ;; See https://oremacs.com/swiper/#introduction
     (use-package ivy
       :ensure
       :config
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")

       ;; Ivy-based interface to standard commands.
       (global-set-key (kbd "C-s") 'swiper-isearch)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       (global-set-key (kbd "C-x C-f") 'counsel-find-file)
       (global-set-key (kbd "M-y") 'counsel-yank-pop)
       ;; NOTE: Look into replacing bindings to the function keys below.
       (global-set-key (kbd "<f1> f") 'counsel-describe-function)
       (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
       (global-set-key (kbd "<f1> l") 'counsel-find-library)
       (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
       (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
       (global-set-key (kbd "<f2> j") 'counsel-set-variable)
       (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
       (global-set-key (kbd "C-c v") 'ivy-push-view)
       (global-set-key (kbd "C-c V") 'ivy-pop-view)

       ;; Ivy-based interface to shell and system tools.
       (global-set-key (kbd "C-c c") 'counsel-compile)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c j") 'counsel-git-grep)
       (global-set-key (kbd "C-c L") 'counsel-git-log)
       (global-set-key (kbd "C-c k") 'counsel-rg)
       (global-set-key (kbd "C-c m") 'counsel-linux-app)
       (global-set-key (kbd "C-c n") 'counsel-fzf)
       (global-set-key (kbd "C-x l") 'counsel-locate)
       (global-set-key (kbd "C-c J") 'counsel-file-jump)
       ;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
       ;;(global-set-key (kbd "C-c w") 'counsel-wmctrl)

       ;; Ivy-resume and other commands
       (global-set-key (kbd "C-c C-r") 'ivy-resume)
       (global-set-key (kbd "C-c b") 'counsel-bookmark)
       (global-set-key (kbd "C-c d") 'counsel-descbinds)
       (global-set-key (kbd "C-c g") 'counsel-git)
       (global-set-key (kbd "C-c o") 'counsel-outline)
       (global-set-key (kbd "C-c t") 'counsel-load-theme)
       (global-set-key (kbd "C-c F") 'counsel-org-file)

       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

       :hook (after-init . ivy-mode))

     ;; Commenting out for now to see if causing strange colors --- remove?
     (use-package ivy-posframe
       :ensure
       :init
       (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
       (ivy-posframe-mode 1))

     (use-package counsel :ensure)
     (use-package counsel-projectile
       :ensure
       :init (counsel-projectile-mode))

     (use-package swiper :ensure)
   #+END_SRC
** Media
*** RSS/Atom Feeds

    #+begin_src emacs-lisp
      (use-package elfeed :ensure)

      (use-package elfeed-org
	:ensure
	:config
	(elfeed-org)
	(setq rmh-elfeed-org-files (list "~/.config/emacs/elfeed.org")))

      (use-package elfeed-dashboard
	:load-path "~/.config/emacs/lisp/elfeed-dashboard"
	:config (progn
		  (setq elfeed-dashboard-file "~/.config/emacs/lisp/elfeed-dashboard/elfeed-dashboard.org")
		  ;; to update feed counts automatically
		  (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links)))
    #+end_src
*** Multimedia

    Use bongo to play audio and video.
   
    #+begin_src emacs-lisp
      (use-package bongo
	:ensure
	:init
	;; It seems bongo doesn't play opus files by default. Let's fix that!
	(setq bongo-custom-backend-matchers
	      `((mpv local-file "opus"))))

      ;; Maybe remove this? Review pros/cons.
      ;; youtube-dl on the CLI seems to download less (e.g. via "youtube-dl -x URL")
      (use-package ytdl :ensure)
    #+end_src
** Key Bindings

   Configuration relating mainly to key binding.

   See `M-x describe-personal-keybindings`.

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
     (setq compilation-scroll-output t)

     (use-package dumb-jump
       :ensure
       :bind (("M-g o" . dumb-jump-go-other-window)
	      ("M-g j" . dumb-jump-go)
	      ("M-g b" . dumb-jump-back)
	      ("M-g i" . dumb-jump-go-prompt)
	      ("M-g x" . dumb-jump-go-prefer-external)
	      ("M-g z" . dumb-jump-go-prefer-external-other-window))
       :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
       )

     (defhydra dumb-jump-hydra (:color blue :columns 3)
       "Dumb Jump"
       ("j" dumb-jump-go "Go")
       ("o" dumb-jump-go-other-window "Other window")
       ("e" dumb-jump-go-prefer-external "Go external")
       ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
       ("i" dumb-jump-go-prompt "Prompt")
       ("l" dumb-jump-quick-look "Quick look")
       ("b" dumb-jump-back "Back"))
   #+end_src
  
** Thin Ice!

   This is an area for things I suspect I don't need, but am not
   completely sure about deleting yet. On thin ice!

   #+BEGIN_SRC emacs-lisp
     ;; Company mode is a standard completion package that works well with lsp-mode.
     ;; company-lsp integrates company mode completion with lsp-mode.
     ;; completion-at-point also works out of the box but doesn't support snippets.
     (use-package company
       :ensure

       :config
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 1)

       :hook (after-init . global-company-mode))

     (use-package company-lsp
       :ensure
       :commands company-lsp)

     (setq compilation-window-height 14)
     (defun my-compilation-hook ()
       (when (not (get-buffer-window "*compilation*"))
	 (save-selected-window
	   (save-excursion
	     (let* ((w (split-window-vertically))
		    (h (window-height w)))
	       (select-window w)
	       (switch-to-buffer "*compilation*")
	       (shrink-window (- h compilation-window-height)))))))
     (add-hook 'compilation-mode-hook 'my-compilation-hook)

   #+END_SRC

