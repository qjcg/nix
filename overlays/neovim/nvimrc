" Examples
" - https://github.com/corps/nix-machines/blob/master/packages/vim/vimrc
" - https://github.com/shdpl/nixos-configuration/blob/master/data/.config/nvim/bundle/go/plugin/go.vim

" COLORS
set background=dark
colorscheme abstract
" My customizations for the above colorscheme.
" See:
"   - :h highlight
"   - :h syntax
highlight Comment cterm=italic gui=italic
highlight Search ctermfg=236 ctermbg=229

set autochdir
set autoindent
set hlsearch			" highlight search results
set ignorecase			" case insensitive searches
set laststatus=1		" only show statusbar if >1 windows open
set listchars=tab:>-,eol:$
set nowrap
set shortmess+=I		" disable welcome screen
set smartcase			" case-sensitive search only if specified
set splitright			" vsplit window to the right by default
set wildmenu			" dmenu-style menu
set wildmode=full


"" MAPS
"" See :h keycodes
let mapleader=","

nnoremap <leader>l :set list!<CR>
nnoremap <leader>r :source $MYVIMRC<CR>		" FIXME: Broken since $MYVIMRC is unset.
nnoremap <leader>S :setlocal spell!<CR>
nnoremap <leader>v :e $MYVIMRC<CR>		" FIXME: Broken since $MYVIMRC is unset.
nnoremap <leader>w :w !sudo tee %<CR><CR>

nnoremap <silent> <leader>G :Goyo<CR>
nnoremap <silent> <leader>n :NERDTreeToggle<CR>
nnoremap <silent> <leader>t :Vista!!<CR>


" Cycling color schemes.
nnoremap <silent> <S-F4> :call PreviousColorScheme()<CR>:colo<CR>
nnoremap <silent> <C-F4> :call NextColorScheme()<CR>:colo<CR>
nnoremap <silent> <F4> :call RandomColorScheme()<CR>:colo<CR>

" Reload syntax highlighting.
nnoremap <F12> <Esc>:syntax sync fromstart<CR>
inoremap <F12> <C-o>:syntax sync fromstart<CR>



autocmd FileType yaml setlocal ai et sw=2 ts=2 cuc
autocmd FileType nix setlocal cuc


" Limelight
" See https://github.com/junegunn/limelight.vim#options
let g:limelight_conceal_ctermfg = 'DarkGray'
let g:limelight_paragraph_span = 1



" Settings for GO + vim
" References:
"   - https://octetz.com/posts/vim-as-go-ide
setlocal autowrite
autocmd BufWritePre *.go CocCommand editor.action.organizeImport

" disable vim-go :GoDef short cut (gd)
" this is handled by COC LanguageClient [LC]
let g:go_def_mapping_enabled = 0


" -------------------------------------------------------------------------------------------------
" coc.nvim default settings
" -------------------------------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use U to show documentation in preview window
nnoremap <silent> U :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
